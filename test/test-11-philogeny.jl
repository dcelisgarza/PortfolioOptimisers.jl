@safetestset "Phylogeny tests" begin
    using PortfolioOptimisers, Test, Clustering, CSV, DataFrames, TimeSeries
    function find_tol(a1, a2; name1 = :a1, name2 = :a2)
        for rtol in
            [1e-10, 5e-10, 1e-9, 5e-9, 1e-8, 5e-8, 1e-7, 5e-7, 1e-6, 5e-6, 1e-5, 5e-5, 1e-4,
             5e-4, 1e-3, 5e-3, 1e-2, 5e-2, 1e-1, 2.5e-1, 5e-1, 1e0, 1.1e0, 1.2e0, 1.3e0,
             1.4e0, 1.5e0, 1.6e0, 1.7e0, 1.8e0, 1.9e0, 2e0, 2.5e0]
            if isapprox(a1, a2; rtol = rtol)
                println("isapprox($name1, $name2, rtol = $(rtol))")
                break
            end
        end
        for atol in
            [1e-10, 5e-10, 1e-9, 5e-9, 1e-8, 5e-8, 1e-7, 5e-7, 1e-6, 5e-6, 1e-5, 5e-5, 1e-4,
             5e-4, 1e-3, 5e-3, 1e-2, 5e-2, 1e-1, 2.5e-1, 5e-1, 1e0, 1.1e0, 1.2e0, 1.3e0,
             1.4e0, 1.5e0, 1.6e0, 1.7e0, 1.8e0, 1.9e0, 2e0, 2.5e0]
            if isapprox(a1, a2; atol = atol)
                println("isapprox($name1, $name2, atol = $(atol))")
                break
            end
        end
    end
    rd = prices_to_returns(TimeArray(CSV.File(joinpath(@__DIR__, "./assets/SP500.csv.gz"));
                                     timestamp = :Date)[(end - 252):end])
    pr = prior(EmpiricalPrior(), rd)
    @testset "Clustering tests" begin
        clr = clusterise(ClusteringEstimator(; ce = PortfolioOptimisersCovariance(),
                                             de = Distance(; alg = CanonicalDistance()),
                                             alg = HClustAlgorithm(),
                                             onc = OptimalNumberClusters(;
                                                                         alg = SecondOrderDifference())),
                         pr.X)
        clr2 = clusterise(clr)
        @test clr === clr2
        clr_t = Hclust{Float64}([-1 -13; -2 1; -7 -4; -3 -9; 4 -6; -14 -10; 6 -16; 2 3;
                                 -8 -12;
                                 -11 9; 10 -15; -18 11; -19 7; -5 -20; 14 -17; 5 8; 13 12;
                                 15 16;
                                 18 17],
                                [0.2992796916890263, 0.3905612031361099, 0.4116454947407609,
                                 0.22529867864314176, 0.48924055164900887,
                                 0.28518628966607656, 0.38008631653392483, 0.58425801808901,
                                 0.4209146698909511, 0.4605479608276049, 0.491265779899127,
                                 0.5080236207888611, 0.6028393326616824,
                                 0.24670816017739164, 0.5174631833197462,
                                 0.6821605083740293, 0.739945604975504, 0.9602133336085281,
                                 1.0707389175241802],
                                [5, 20, 17, 3, 9, 6, 2, 1, 13, 7, 4, 19, 14, 10, 16, 18, 11,
                                 8, 12, 15], :ward)
        @test clr.clustering.merges == clr_t.merges
        @test isapprox(clr.clustering.heights, clr_t.heights)
        @test clr.clustering.labels == clr_t.labels
        @test clr.clustering.linkage == clr_t.linkage
        clr = clusterise(ClusteringEstimator(; ce = PortfolioOptimisersCovariance(),
                                             de = Distance(; alg = CanonicalDistance()),
                                             alg = DBHT(),
                                             onc = OptimalNumberClusters(;
                                                                         alg = SecondOrderDifference())),
                         pr.X)
        clr_t = Hclust{Float64}([-1 -13; -7 -4; -3 -9; -5 -20; 4 -17; -2 1; 3 -6; 7 6; 8 2;
                                 5 9;
                                 -14 -10; -19 11; -11 -8; -12 -15; -18 13; -16 15; 16 14;
                                 12 17;
                                 10 18],
                                [0.1, 0.1111111111111111, 0.125, 0.14285714285714285,
                                 0.16666666666666666, 0.2, 0.25, 0.3333333333333333, 0.5,
                                 1.0, 0.125, 0.14285714285714285, 0.16666666666666666, 0.2,
                                 0.25, 0.3333333333333333, 0.5, 1.0, 2.0],
                                [5, 20, 17, 3, 9, 6, 2, 1, 13, 7, 4, 19, 14, 10, 16, 18, 11,
                                 8, 12, 15], :DBHT)
        @test clr.clustering.merges == clr_t.merges
        @test isapprox(clr.clustering.heights, clr_t.heights)
        @test clr.clustering.labels == clr_t.labels
        @test clr.clustering.linkage == clr_t.linkage
        @test 2 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = SecondOrderDifference(),
                                                                                     max_k = nothing),
                                                               clr.clustering, clr.D)
        @test 1 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = SecondOrderDifference(),
                                                                                     max_k = 1),
                                                               clr.clustering, clr.D)
        @test 2 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = SecondOrderDifference(),
                                                                                     max_k = 100),
                                                               clr.clustering, clr.D)

        @test 2 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = StandardisedSilhouetteScore(),
                                                                                     max_k = nothing),
                                                               clr.clustering, clr.D)
        @test 1 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = StandardisedSilhouetteScore(),
                                                                                     max_k = 1),
                                                               clr.clustering, clr.D)
        @test 2 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = StandardisedSilhouetteScore(),
                                                                                     max_k = 100),
                                                               clr.clustering, clr.D)

        @test 2 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = StandardisedSilhouetteScore(),
                                                                                     max_k = nothing),
                                                               clr.clustering, clr.D)
        @test 1 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = StandardisedSilhouetteScore(),
                                                                                     max_k = 1),
                                                               clr.clustering, clr.D)
        @test 2 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = StandardisedSilhouetteScore(),
                                                                                     max_k = 100),
                                                               clr.clustering, clr.D)
        @test 4 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = PredefinedNumberClusters(;
                                                                                                                    k = 10),
                                                                                     max_k = nothing),
                                                               clr.clustering, clr.D)
        @test 1 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = PredefinedNumberClusters(;
                                                                                                                    k = 1),
                                                                                     max_k = 5),
                                                               clr.clustering, clr.D)
        @test 2 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = PredefinedNumberClusters(;
                                                                                                                    k = 2),
                                                                                     max_k = 5),
                                                               clr.clustering, clr.D)
        @test 2 == PortfolioOptimisers.optimal_number_clusters(OptimalNumberClusters(;
                                                                                     alg = PredefinedNumberClusters(;
                                                                                                                    k = 3),
                                                                                     max_k = 2),
                                                               clr.clustering, clr.D)

        clr = clusterise(ClusteringEstimator(; ce = PortfolioOptimisersCovariance(),
                                             de = DistanceDistance(;
                                                                   alg = CanonicalDistance()),
                                             alg = HClustAlgorithm(),
                                             onc = OptimalNumberClusters(;
                                                                         alg = StandardisedSilhouetteScore())),
                         pr.X)
        @test clr.k == 2

        clr = clusterise(ClusteringEstimator(; ce = PortfolioOptimisersCovariance(),
                                             de = DistanceDistance(;
                                                                   alg = CanonicalDistance()),
                                             alg = DBHT(; sim = MaximumDistanceSimilarity(),
                                                        root = UniqueRoot()),
                                             onc = OptimalNumberClusters(;
                                                                         alg = PredefinedNumberClusters(;
                                                                                                        k = 5))),
                         pr.X)
        @test clr.k == 4
    end
    @testset "Centrality tests" begin
        ces = [BetweennessCentrality(), ClosenessCentrality(), DegreeCentrality(),
               EigenvectorCentrality(), KatzCentrality(), Pagerank(), RadialityCentrality(),
               StressCentrality()]
        df1 = CSV.read(joinpath(@__DIR__, "./assets/Centrality1.csv.gz"), DataFrame)
        df2 = CSV.read(joinpath(@__DIR__, "./assets/AverageCentrality1.csv.gz"), DataFrame)
        w = fill(inv(20), 20)
        wak = Float64[]
        for (i, ce) in enumerate(ces)
            v1 = centrality_vector(Centrality(; cent = ce), pr.X)
            res = isapprox(v1, df1[!, i])
            if !res
                println("Default centrality iteration: $i")
                find_tol(v1, df1[!, i])
            end
            @test res

            c = average_centrality(Centrality(; cent = ce), w, pr.X)
            res = isapprox(c, df2[i, 1])
            if !res
                println("Average default centrality iteration: $i")
                find_tol(c, df2[i, 1])
            end
            @test res
        end
    end
    @testset "Phylogeny matrix" begin
        df = CSV.read(joinpath(@__DIR__, "./assets/PhylogenyMatrix1.csv.gz"), DataFrame)
        for i in 1:8
            A = phylogeny_matrix(Network(; n = i), pr.X)
            res = isapprox(vec(A), df[!, i])
            if !res
                println("Iteration $i failed on detault network estimator.")
                find_tol(vec(A), df[!, i]; name1 = :A, name2 = :df)
            end
            @test res
        end

        df = CSV.read(joinpath(@__DIR__, "./assets/PhylogenyMatrix2.csv.gz"), DataFrame)
        for i in 1:5
            A = phylogeny_matrix(Network(; n = i, alg = MaximumDistanceSimilarity()), pr.X)
            res = isapprox(vec(A), df[!, i])
            if !res
                println("Iteration $i failed on MaximumDistanceSimilarity.")
                find_tol(vec(A), df[!, i]; name1 = :A, name2 = :df)
            end
            @test res
        end

        df = CSV.read(joinpath(@__DIR__, "./assets/PhylogenyMatrix3.csv.gz"), DataFrame)
        A = phylogeny_matrix(ClusteringEstimator(), pr.X)
        @test isapprox(vec(A), df[!, 1])

        w = fill(inv(20), 20)
        @test isapprox(asset_phylogeny(Network(), w, pr.X), 0.09500000000000008)
        @test isapprox(asset_phylogeny(ClusteringEstimator(), w, pr.X), 0.3350000000000003)

        A1 = PortfolioOptimisers.calc_adjacency(Network(; alg = KruskalTree()), pr.X)
        A2 = PortfolioOptimisers.calc_adjacency(Network(; alg = BoruvkaTree()), pr.X)
        A3 = PortfolioOptimisers.calc_adjacency(Network(; alg = PrimTree()), pr.X)

        @test A1 == A2
        @test A1 == A3
    end
    #=
    @testset "DBHT Clustering tests" begin
        X = TimeArray(CSV.File(joinpath(@__DIR__, "./assets/asset_prices.csv"));
                      timestamp = :timestamp)
        rd = prices_to_returns(X[(end - 252):end])
        X = rd.X
        ce = PortfolioOptimisersCovariance()
        de = Distance(; alg = SimpleDistance())
        rho = cor(ce, X)
        dist = distance(de, rho, X)

        @test isapprox(PortfolioOptimisers.dbht_similarity(GeneralExponentialSimilarity();
                                                           D = rho),
                       PortfolioOptimisers.dbht_similarity(ExponentialSimilarity(); D = rho))

        sim = MaximumDistanceSimilarity()
        S = PortfolioOptimisers.dbht_similarity(sim; S = rho, D = dist)
        root = UniqueRoot()
        T8, Rpm, Adjv, Dpm, Mv, Z1, dbht = PortfolioOptimisers.DBHTs(dist, S;
                                                                     branchorder = :default,
                                                                     root = root)
        Z1_t = reshape([-3.0, -1.0, -7.0, -25.0, -21.0, -2.0, -8.0, -6.0, -28.0, -26.0, -22.0,
                        -14.0, -9.0, -11.0, -30.0, -4.0, -17.0, -10.0, -5.0, 6.0, 17.0, 2.0,
                        18.0, 11.0, 13.0, 22.0, 4.0, 15.0, 27.0, -29.0, 1.0, -16.0, 3.0, -24.0,
                        -19.0, -15.0, -12.0, 8.0, -27.0, 10.0, -20.0, 12.0, -18.0, 14.0, -13.0,
                        -23.0, 16.0, 7.0, 9.0, 20.0, 5.0, 19.0, 23.0, 21.0, 25.0, 26.0, 24.0,
                        28.0, 0.034482758620689655, 0.03571428571428571, 0.037037037037037035,
                        0.038461538461538464, 0.04, 0.041666666666666664, 0.043478260869565216,
                        0.045454545454545456, 0.047619047619047616, 0.05, 0.05263157894736842,
                        0.05555555555555555, 0.058823529411764705, 0.0625, 0.06666666666666667,
                        0.07142857142857142, 0.07692307692307693, 0.08333333333333333,
                        0.09090909090909091, 0.1, 0.1111111111111111, 0.125,
                        0.14285714285714285, 0.16666666666666666, 0.2, 0.25, 0.3333333333333333,
                        0.5, 1.0, 2.0, 3.0, 2.0, 3.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 3.0, 2.0,
                        3.0, 2.0, 3.0, 2.0, 2.0, 3.0, 3.0, 5.0, 7.0, 5.0, 6.0, 9.0, 10.0, 15.0,
                        18.0, 12.0, 30.0], :, 4)
        @test isapprox(Z1, Z1_t)

        A1, tri1, separators1, cliques1, cliqueTree1 = PortfolioOptimisers.PMFG_T2s(S, 5)
        A1_t = sparse([3, 24, 29, 3, 6, 19, 1, 2, 6, 7, 10, 14, 15, 16, 17, 19, 21, 24, 29, 5,
                       8, 10, 11, 13, 15, 16, 22, 26, 27, 4, 8, 11, 15, 18, 30, 2, 3, 12, 16,
                       17, 19, 21, 23, 24, 28, 3, 10, 16, 25, 29, 4, 5, 15, 16, 14, 17, 20, 3,
                       4, 7, 13, 15, 16, 25, 4, 5, 15, 18, 30, 6, 17, 19, 28, 4, 10, 15, 22, 3,
                       9, 17, 19, 20, 3, 4, 5, 8, 10, 11, 13, 16, 18, 22, 27, 3, 4, 6, 7, 8, 10,
                       15, 17, 23, 24, 25, 29, 3, 6, 9, 12, 14, 16, 19, 20, 23, 28, 5, 11, 15,
                       30, 2, 3, 6, 12, 14, 17, 20, 9, 14, 17, 19, 3, 6, 24, 4, 13, 15, 26, 27,
                       6, 16, 17, 1, 3, 6, 16, 21, 29, 7, 10, 16, 4, 22, 27, 4, 15, 22, 26, 6,
                       12, 17, 1, 3, 7, 16, 24, 5, 11, 18],
                      [1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4,
                       4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7,
                       7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11,
                       11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 15, 15,
                       15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
                       16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19,
                       19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23,
                       23, 24, 24, 24, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 27, 28,
                       28, 28, 29, 29, 29, 29, 29, 30, 30, 30],
                      [0.7816641847363256, 0.7316807590015212, 0.7683746613243841,
                       0.7902418858652103, 0.7901906289071934, 0.7950432446999863,
                       0.7816641847363256, 0.7902418858652103, 0.7915181774751375,
                       0.7696847921093792, 0.7933378743892743, 0.7888571183860922,
                       0.7557516290489048, 0.8004821874279777, 0.7800037858385857,
                       0.7775134750269215, 0.7782824257876472, 0.8757969868545106,
                       0.940246788899921, 0.7060748528496048, 0.7368999498709721,
                       0.7737888218120279, 0.6928099997482, 0.7804589095290857,
                       0.8431995287270456, 0.7609187638477687, 0.7563996400073232,
                       0.6697431022982079, 0.7387004451572843, 0.7060748528496048,
                       0.6531408875956941, 0.7235603792607732, 0.7363185959263081,
                       0.7095744015387154, 0.7109498158447688, 0.7901906289071934,
                       0.7915181774751375, 0.825313418545372, 0.7972892531534442,
                       0.8636318852869648, 0.8545064792020292, 0.773100411774844,
                       0.7881479607984379, 0.77232315344912, 0.7883261802417582,
                       0.7696847921093792, 0.7427616167265069, 0.8280873727403872,
                       0.6992674912804311, 0.7426100374529017, 0.7368999498709721,
                       0.6531408875956941, 0.7170659075173489, 0.694208204520547,
                       0.7745741975682464, 0.7456074483471982, 0.7247481694195679,
                       0.7933378743892743, 0.7737888218120279, 0.7427616167265069,
                       0.7606686996464144, 0.7873073555828847, 0.7826619148453403,
                       0.7155234015554408, 0.6928099997482, 0.7235603792607732,
                       0.661643865044952, 0.6802392647412279, 0.6640068485897885,
                       0.825313418545372, 0.8102576225087195, 0.8072731782293077,
                       0.7874319636394267, 0.7804589095290857, 0.7606686996464144,
                       0.7911386173022757, 0.6793609775167029, 0.7888571183860922,
                       0.7745741975682464, 0.8231535542454383, 0.786281888942755,
                       0.8004665082535787, 0.7557516290489048, 0.8431995287270456,
                       0.7363185959263081, 0.7170659075173489, 0.7873073555828847,
                       0.661643865044952, 0.7911386173022757, 0.7511113235075095,
                       0.6313292411074813, 0.7164639522699217, 0.6935176920107173,
                       0.8004821874279777, 0.7609187638477687, 0.7972892531534442,
                       0.8280873727403872, 0.694208204520547, 0.7826619148453403,
                       0.7511113235075095, 0.7745043933535881, 0.7848223314871908,
                       0.7617315985880675, 0.7143000938896955, 0.8039864466804436,
                       0.7800037858385857, 0.8636318852869648, 0.7456074483471982,
                       0.8102576225087195, 0.8231535542454383, 0.7745043933535881,
                       0.836276826496608, 0.7404841297603928, 0.7735740633005248,
                       0.7588707977185343, 0.7095744015387154, 0.6802392647412279,
                       0.6313292411074813, 0.6457088737163896, 0.7950432446999863,
                       0.7775134750269215, 0.8545064792020292, 0.8072731782293077,
                       0.786281888942755, 0.836276826496608, 0.759345751786569,
                       0.7247481694195679, 0.8004665082535787, 0.7404841297603928,
                       0.759345751786569, 0.7782824257876472, 0.773100411774844,
                       0.8310547931419772, 0.7563996400073232, 0.6793609775167029,
                       0.7164639522699217, 0.6704282888502833, 0.6612756054878979,
                       0.7881479607984379, 0.7848223314871908, 0.7735740633005248,
                       0.7316807590015212, 0.8757969868545106, 0.77232315344912,
                       0.7617315985880675, 0.8310547931419772, 0.848708256191095,
                       0.6992674912804311, 0.7155234015554408, 0.7143000938896955,
                       0.6697431022982079, 0.6704282888502833, 0.7404966900836785,
                       0.7387004451572843, 0.6935176920107173, 0.6612756054878979,
                       0.7404966900836785, 0.7883261802417582, 0.7874319636394267,
                       0.7588707977185343, 0.7683746613243841, 0.940246788899921,
                       0.7426100374529017, 0.8039864466804436, 0.848708256191095,
                       0.7109498158447688, 0.6640068485897885, 0.6457088737163896], 30, 30)
        tri1_t = reshape([16, 3, 16, 16, 16, 3, 16, 3, 16, 3, 3, 6, 6, 17, 3, 17, 3, 24, 3, 6,
                          16, 6, 6, 17, 16, 3, 17, 19, 16, 3, 16, 10, 10, 15, 3, 29, 17, 14, 15,
                          4, 16, 15, 16, 7, 15, 4, 15, 4, 4, 22, 15, 4, 15, 5, 5, 11, 3, 7, 3,
                          7, 29, 29, 24, 24, 6, 6, 17, 17, 19, 19, 19, 19, 6, 6, 19, 19, 17, 17,
                          12, 12, 7, 7, 14, 14, 10, 10, 15, 15, 4, 4, 24, 24, 20, 20, 13, 13, 4,
                          4, 10, 10, 8, 8, 22, 22, 27, 27, 5, 5, 11, 11, 18, 18, 15, 29, 17, 29,
                          24, 1, 6, 21, 23, 2, 14, 28, 12, 12, 14, 20, 21, 21, 2, 2, 23, 23, 28,
                          28, 25, 10, 9, 20, 4, 15, 8, 13, 13, 27, 1, 1, 9, 9, 22, 22, 8, 11,
                          25, 25, 5, 5, 27, 26, 26, 26, 18, 11, 18, 30, 30, 30], :, 3)
        separators1_t = reshape([16, 16, 16, 3, 6, 3, 3, 3, 16, 6, 16, 17, 16, 16, 10, 3, 17,
                                 15, 16, 16, 15, 15, 4, 15, 15, 5, 3, 3, 3, 6, 17, 17, 24, 6, 6,
                                 17, 3, 19, 3, 10, 15, 29, 14, 4, 15, 7, 4, 4, 22, 4, 5, 11, 29,
                                 24, 6, 17, 19, 19, 6, 19, 17, 12, 7, 14, 10, 15, 4, 24, 20, 13,
                                 4, 10, 8, 22, 27, 5, 11, 18], :, 3)
        cliques1_t = reshape([16, 16, 16, 16, 3, 6, 3, 3, 3, 16, 6, 16, 17, 16, 16, 10, 3, 17,
                              15, 16, 16, 15, 15, 4, 15, 15, 5, 3, 3, 3, 3, 6, 17, 17, 24, 6, 6,
                              17, 3, 19, 3, 10, 15, 29, 14, 4, 15, 7, 4, 4, 22, 4, 5, 11, 7, 29,
                              24, 6, 17, 19, 19, 6, 19, 17, 12, 7, 14, 10, 15, 4, 24, 20, 13, 4,
                              10, 8, 22, 27, 5, 11, 18, 29, 24, 6, 17, 19, 12, 14, 21, 2, 23,
                              28, 10, 20, 15, 4, 13, 1, 9, 22, 8, 25, 5, 27, 26, 11, 18, 30], :,
                             4)
        cliqueTree1_t = sparse([3, 4, 14, 17, 21, 1, 4, 8, 12, 14, 1, 2, 5, 9, 10, 12, 14, 17,
                                1, 2, 3, 6, 7, 8, 9, 11, 12, 14, 4, 8, 10, 11, 13, 5, 7, 9, 10,
                                13, 5, 6, 9, 18, 3, 4, 5, 9, 17, 4, 5, 6, 7, 8, 4, 5, 6, 11, 5,
                                6, 10, 2, 3, 4, 15, 6, 7, 1, 2, 3, 4, 12, 16, 20, 21, 14, 19,
                                21, 22, 23, 25, 15, 20, 22, 23, 25, 2, 3, 8, 13, 16, 20, 22, 24,
                                25, 15, 16, 19, 23, 25, 1, 12, 14, 15, 16, 19, 20, 23, 26, 16,
                                19, 20, 22, 25, 23, 16, 19, 20, 22, 23, 27, 25, 26],
                               [1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4,
                                4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 7, 7, 7, 7,
                                8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10, 10, 11, 11, 11, 12,
                                12, 12, 12, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15,
                                15, 15, 15, 16, 16, 16, 16, 16, 17, 17, 17, 18, 19, 19, 19, 19,
                                19, 20, 20, 20, 20, 20, 21, 21, 21, 21, 22, 22, 22, 22, 22, 23,
                                23, 23, 23, 23, 24, 25, 25, 25, 25, 25, 25, 26, 27],
                               [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 27, 27)
        @test isapprox(A1, A1_t)
        @test isapprox(tri1, tri1_t)
        @test isapprox(separators1, separators1_t)
        @test isapprox(cliques1, cliques1_t)
        @test isapprox(cliqueTree1, cliqueTree1_t)

        sim = ExponentialSimilarity()
        S = PortfolioOptimisers.dbht_similarity(sim; S = rho, D = dist)

        root = EqualRoot()
        T8, Rpm, Adjv, Dpm, Mv, Z2, dbht = PortfolioOptimisers.DBHTs(dist, S;
                                                                     branchorder = :optimal,
                                                                     root = root)
        Z2_t = reshape([-3.0, -1.0, -10.0, -25.0, -21.0, -9.0, -8.0, -14.0, -23.0, -26.0, -22.0,
                        -11.0, -30.0, -6.0, -28.0, -2.0, -4.0, -7.0, -5.0, 6.0, 2.0, 17.0, 15.0,
                        4.0, 11.0, 18.0, 13.0, 24.0, 27.0, -29.0, 1.0, -16.0, 3.0, -24.0, -17.0,
                        -15.0, -20.0, 8.0, -27.0, 10.0, -18.0, 12.0, -12.0, 14.0, -19.0, -13.0,
                        9.0, 7.0, 16.0, 5.0, 19.0, 20.0, 21.0, 22.0, 23.0, 25.0, 26.0, 28.0,
                        0.034482758620689655, 0.03571428571428571, 0.037037037037037035,
                        0.038461538461538464, 0.04, 0.041666666666666664, 0.043478260869565216,
                        0.045454545454545456, 0.047619047619047616, 0.05, 0.05263157894736842,
                        0.05555555555555555, 0.058823529411764705, 0.0625, 0.06666666666666667,
                        0.07142857142857142, 0.07692307692307693, 0.08333333333333333,
                        0.09090909090909091, 0.1, 0.1111111111111111, 0.125,
                        0.14285714285714285, 0.16666666666666666, 0.2, 0.25, 0.3333333333333333,
                        0.5, 1.0, 2.0, 3.0, 2.0, 3.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 3.0, 2.0,
                        3.0, 2.0, 3.0, 2.0, 2.0, 4.0, 3.0, 4.0, 5.0, 5.0, 7.0, 8.0, 8.0, 11.0,
                        11.0, 19.0, 30.0], :, 4)
        @test isapprox(Z2, Z2_t)

        A2, tri2, separators2, cliques2, cliqueTree2 = PortfolioOptimisers.PMFG_T2s(S, 5)
        A2_t = sparse([3, 10, 29, 3, 6, 9, 14, 16, 17, 19, 24, 29, 1, 2, 6, 7, 10, 14, 15, 16,
                       17, 21, 24, 29, 5, 8, 10, 11, 13, 15, 16, 22, 26, 27, 4, 8, 11, 15, 18,
                       30, 2, 3, 12, 17, 19, 28, 3, 14, 16, 20, 23, 4, 5, 15, 16, 2, 14, 17, 1,
                       3, 4, 13, 15, 16, 25, 29, 4, 5, 15, 18, 30, 6, 17, 19, 28, 4, 10, 15, 22,
                       2, 3, 7, 9, 16, 17, 20, 23, 3, 4, 5, 8, 10, 11, 13, 16, 18, 22, 27, 2, 3,
                       4, 7, 8, 10, 14, 15, 23, 25, 29, 2, 3, 6, 9, 12, 14, 19, 28, 5, 11, 15,
                       30, 2, 6, 12, 17, 7, 14, 23, 3, 24, 29, 4, 13, 15, 26, 27, 7, 14, 16, 20,
                       2, 3, 21, 29, 10, 16, 29, 4, 22, 27, 4, 15, 22, 26, 6, 12, 17, 1, 2, 3,
                       10, 16, 21, 24, 25, 5, 11, 18],
                      [1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
                       4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7,
                       7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11,
                       11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14,
                       15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16,
                       16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19,
                       19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 24,
                       24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 27, 28, 28, 28, 29, 29,
                       29, 29, 29, 29, 29, 29, 30, 30, 30],
                      [0.626714502196399, 0.5952276453835667, 0.6179951299556474,
                       0.6325515407567773, 0.6325161474870034, 0.5924079972337691,
                       0.6106041919669216, 0.6206866609821369, 0.6286681151371817,
                       0.6358952066692547, 0.6265615221157578, 0.6223013135544568,
                       0.626714502196399, 0.6325515407567773, 0.633434868048951,
                       0.6188380533633001, 0.634701123817698, 0.6315975576372738,
                       0.6100496671262657, 0.639752325945361, 0.6256040973828371,
                       0.6244594043846303, 0.7029816579361001, 0.7831392951842335,
                       0.5814974807568316, 0.5987370295764817, 0.6215017020446391,
                       0.5745045639699345, 0.6259078511190505, 0.673019892021328,
                       0.6132642618250566, 0.6104500103814954, 0.5628850634269977,
                       0.5997906020038952, 0.5814974807568316, 0.5549110427046743,
                       0.5910969347285154, 0.5983980109272683, 0.5833829226498065,
                       0.584128739811752, 0.6325161474870034, 0.633434868048951,
                       0.6583916983140445, 0.6912314675204657, 0.6828800006328515,
                       0.6312329984708543, 0.6188380533633001, 0.612064361367784,
                       0.6605889611569918, 0.598013939116339, 0.6153223437038713,
                       0.5987370295764817, 0.5549110427046743, 0.587478579683404,
                       0.5752305027550456, 0.5924079972337691, 0.6220154968220857,
                       0.6038838355405132, 0.5952276453835667, 0.634701123817698,
                       0.6215017020446391, 0.6131075046565078, 0.6305353063656726,
                       0.6273847253959038, 0.5866285361925857, 0.6269545308834255,
                       0.5745045639699345, 0.5910969347285154, 0.5589563588640523,
                       0.5680908628481256, 0.5600948344560923, 0.6583916983140445,
                       0.6468801243693407, 0.6446765049795941, 0.630620506889349,
                       0.6259078511190505, 0.6131075046565078, 0.6331717620414965,
                       0.5676501604783291, 0.6106041919669216, 0.6315975576372738,
                       0.612064361367784, 0.6220154968220857, 0.6055263583359068,
                       0.6566979239106111, 0.6397410979586964, 0.6309510710647757,
                       0.6100496671262657, 0.673019892021328, 0.5983980109272683,
                       0.587478579683404, 0.6305353063656726, 0.5589563588640523,
                       0.6331717620414965, 0.6072058377708328, 0.5448838422759799,
                       0.5871464329433354, 0.574871671642645, 0.6206866609821369,
                       0.639752325945361, 0.6132642618250566, 0.6605889611569918,
                       0.5752305027550456, 0.6273847253959038, 0.6055263583359068,
                       0.6072058377708328, 0.6288437457362273, 0.5859569051741962,
                       0.6422779153086382, 0.6286681151371817, 0.6256040973828371,
                       0.6912314675204657, 0.6038838355405132, 0.6468801243693407,
                       0.6566979239106111, 0.6672255040868339, 0.6119840350234862,
                       0.5833829226498065, 0.5680908628481256, 0.5448838422759799,
                       0.5514392538382796, 0.6358952066692547, 0.6828800006328515,
                       0.6446765049795941, 0.6672255040868339, 0.598013939116339,
                       0.6397410979586964, 0.6041771689536221, 0.6244594043846303,
                       0.6629674084628745, 0.600460517353584, 0.6104500103814954,
                       0.5676501604783291, 0.5871464329433354, 0.5632208996756527,
                       0.5587794994968943, 0.6153223437038713, 0.6309510710647757,
                       0.6288437457362273, 0.6041771689536221, 0.6265615221157578,
                       0.7029816579361001, 0.6629674084628745, 0.6777597574877918,
                       0.5866285361925857, 0.5859569051741962, 0.576913460418243,
                       0.5628850634269977, 0.5632208996756527, 0.6008471674747321,
                       0.5997906020038952, 0.574871671642645, 0.5587794994968943,
                       0.6008471674747321, 0.6312329984708543, 0.630620506889349,
                       0.6119840350234862, 0.6179951299556474, 0.6223013135544568,
                       0.7831392951842335, 0.6269545308834255, 0.6422779153086382,
                       0.600460517353584, 0.6777597574877918, 0.576913460418243,
                       0.584128739811752, 0.5600948344560923, 0.5514392538382796], 30, 30)
        tri2_t = reshape([3, 16, 3, 3, 3, 16, 3, 2, 3, 14, 3, 2, 2, 17, 17, 6, 3, 16, 3, 16, 3,
                          29, 16, 14, 17, 6, 3, 16, 16, 10, 10, 15, 14, 7, 3, 29, 14, 2, 15, 4,
                          16, 15, 16, 29, 15, 4, 15, 4, 4, 22, 15, 4, 15, 5, 5, 11, 16, 14, 16,
                          14, 2, 2, 29, 29, 2, 2, 17, 17, 6, 6, 19, 19, 14, 14, 29, 29, 24, 24,
                          7, 7, 12, 12, 10, 10, 15, 15, 4, 4, 23, 23, 10, 10, 17, 17, 13, 13, 4,
                          4, 10, 10, 8, 8, 22, 22, 27, 27, 5, 5, 11, 11, 18, 18, 7, 2, 15, 17,
                          24, 29, 21, 24, 6, 9, 6, 19, 19, 28, 12, 12, 7, 23, 1, 25, 21, 21, 23,
                          20, 28, 28, 15, 4, 8, 13, 13, 27, 20, 20, 1, 1, 9, 9, 22, 22, 8, 11,
                          25, 25, 5, 5, 27, 26, 26, 26, 18, 11, 18, 30, 30, 30], :, 3)
        separators2_t = reshape([3, 3, 3, 3, 2, 17, 3, 3, 3, 16, 17, 3, 16, 10, 14, 3, 14, 15,
                                 16, 16, 15, 15, 4, 15, 15, 5, 16, 2, 14, 2, 17, 6, 16, 16, 29,
                                 14, 6, 16, 10, 15, 7, 29, 2, 4, 15, 29, 4, 4, 22, 4, 5, 11, 2,
                                 29, 2, 17, 6, 19, 14, 29, 24, 7, 12, 10, 15, 4, 23, 10, 17, 13,
                                 4, 10, 8, 22, 27, 5, 11, 18], :, 3)
        cliques2_t = reshape([3, 3, 3, 3, 3, 2, 17, 3, 3, 3, 16, 17, 3, 16, 10, 14, 3, 14, 15,
                              16, 16, 15, 15, 4, 15, 15, 5, 16, 16, 2, 14, 2, 17, 6, 16, 16, 29,
                              14, 6, 16, 10, 15, 7, 29, 2, 4, 15, 29, 4, 4, 22, 4, 5, 11, 14, 2,
                              29, 2, 17, 6, 19, 14, 29, 24, 7, 12, 10, 15, 4, 23, 10, 17, 13, 4,
                              10, 8, 22, 27, 5, 11, 18, 2, 29, 24, 17, 6, 19, 12, 7, 10, 21, 23,
                              28, 15, 4, 13, 20, 1, 9, 22, 8, 25, 5, 27, 26, 11, 18, 30], :, 4)
        cliqueTree2_t = sparse([3, 5, 9, 11, 13, 18, 1, 4, 5, 8, 10, 13, 17, 21, 2, 4, 5, 9, 17,
                                1, 2, 3, 6, 8, 2, 3, 4, 7, 12, 18, 5, 12, 18, 6, 2, 4, 9, 13,
                                16, 1, 2, 3, 8, 10, 14, 3, 9, 17, 1, 8, 6, 7, 1, 2, 8, 9, 15,
                                17, 20, 21, 13, 19, 21, 22, 23, 25, 14, 20, 22, 23, 25, 11, 3,
                                9, 10, 13, 21, 4, 5, 6, 15, 20, 22, 24, 25, 14, 15, 19, 23, 25,
                                9, 13, 14, 17, 15, 19, 20, 23, 26, 15, 19, 20, 22, 25, 23, 15,
                                19, 20, 22, 23, 27, 25, 26],
                               [1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4,
                                4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 7, 8, 8, 8, 8, 8, 9, 9, 9,
                                9, 9, 9, 10, 10, 10, 11, 11, 12, 12, 13, 13, 13, 13, 13, 13, 13,
                                13, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 17, 17, 17,
                                17, 17, 18, 18, 18, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 21,
                                21, 21, 21, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 24, 25, 25,
                                25, 25, 25, 25, 26, 27],
                               [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                1, 1, 1, 1, 1, 1, 1, 1], 27, 27)
        @test isapprox(A2, A2_t)
        @test isapprox(tri2, tri2_t)
        @test isapprox(separators2, separators2_t)
        @test isapprox(cliques2, cliques2_t)
        @test isapprox(cliqueTree2, cliqueTree2_t)

        T8, Rpm, Adjv, Dpm, Mv, Z3, dbht = PortfolioOptimisers.DBHTs(dist, S; branchorder = :r,
                                                                     root = root)
        Z3_t = reshape([-3.0, -1.0, -10.0, -25.0, -21.0, -9.0, -8.0, -14.0, -23.0, -26.0, -22.0,
                        -11.0, -30.0, -6.0, -28.0, -2.0, -4.0, -7.0, -5.0, 6.0, 2.0, 17.0, 15.0,
                        4.0, 11.0, 18.0, 13.0, 24.0, 27.0, -29.0, 1.0, -16.0, 3.0, -24.0, -17.0,
                        -15.0, -20.0, 8.0, -27.0, 10.0, -18.0, 12.0, -12.0, 14.0, -19.0, -13.0,
                        9.0, 7.0, 16.0, 5.0, 19.0, 20.0, 21.0, 22.0, 23.0, 25.0, 26.0, 28.0,
                        0.034482758620689655, 0.03571428571428571, 0.037037037037037035,
                        0.038461538461538464, 0.04, 0.041666666666666664, 0.043478260869565216,
                        0.045454545454545456, 0.047619047619047616, 0.05, 0.05263157894736842,
                        0.05555555555555555, 0.058823529411764705, 0.0625, 0.06666666666666667,
                        0.07142857142857142, 0.07692307692307693, 0.08333333333333333,
                        0.09090909090909091, 0.1, 0.1111111111111111, 0.125,
                        0.14285714285714285, 0.16666666666666666, 0.2, 0.25, 0.3333333333333333,
                        0.5, 1.0, 2.0, 3.0, 2.0, 3.0, 2.0, 2.0, 2.0, 2.0, 3.0, 2.0, 3.0, 2.0,
                        3.0, 2.0, 3.0, 2.0, 2.0, 4.0, 3.0, 4.0, 5.0, 5.0, 7.0, 8.0, 8.0, 11.0,
                        11.0, 19.0, 30.0], :, 4)
        @test isapprox(Z3, Z3_t)
    end
    @testset "LoGo" begin
        X = TimeArray(CSV.File(joinpath(@__DIR__, "./assets/asset_prices.csv"));
                      timestamp = :timestamp)
        rd = prices_to_returns(X[(end - 252):end])
        X = rd.X
        ce = PortfolioOptimisersCovariance()
        sigma = cov(ce, X)

        logo_t = CSV.read(joinpath(@__DIR__, "./assets/LoGo-MaximumDistanceSimilarity.csv"),
                          DataFrame)

        des = [Distance(; alg = CanonicalDistance()),
               DistanceDistance(; alg = CanonicalDistance()),
               Distance(; alg = SimpleDistance()), DistanceDistance(; alg = SimpleDistance()),
               Distance(; alg = SimpleAbsoluteDistance()),
               DistanceDistance(; alg = SimpleAbsoluteDistance()),
               Distance(; alg = CorrelationDistance()),
               DistanceDistance(; alg = CorrelationDistance()), Distance(; alg = LogDistance()),
               DistanceDistance(; alg = LogDistance()),
               Distance(; alg = VariationInfoDistance()),
               DistanceDistance(; alg = VariationInfoDistance())]
        desg = [GeneralDistance(; alg = CanonicalDistance()),
                GeneralDistanceDistance(; alg = CanonicalDistance()),
                GeneralDistance(; alg = SimpleDistance()),
                GeneralDistanceDistance(; alg = SimpleDistance()),
                GeneralDistance(; alg = SimpleAbsoluteDistance()),
                GeneralDistanceDistance(; alg = SimpleAbsoluteDistance()),
                GeneralDistance(; alg = CorrelationDistance()),
                GeneralDistanceDistance(; alg = CorrelationDistance()),
                GeneralDistance(; alg = LogDistance()),
                GeneralDistanceDistance(; alg = LogDistance()),
                GeneralDistance(; alg = VariationInfoDistance()),
                GeneralDistanceDistance(; alg = VariationInfoDistance())]
        for i in eachindex(des)
            sigma1 = copy(sigma)
            sigma2 = copy(sigma)
            PortfolioOptimisers.matrix_processing_algorithm!(PortfolioOptimisers.LoGo(;
                                                                                      dist = des[i]),
                                                             Posdef(), sigma1, X)
            PortfolioOptimisers.matrix_processing_algorithm!(PortfolioOptimisers.LoGo(;
                                                                                      dist = desg[i]),
                                                             Posdef(), sigma2, X)
            MN = size(sigma1)
            res1 = isapprox(sigma1, reshape(logo_t[!, i], MN))
            if !res1
                println("Fails on LoGo MaxDist sim iteration $i")
                find_tol(sigma1, reshape(logo_t[!, i], MN); name1 = :sigma, name2 = :logo_t)
            end
            @test res1

            res2 = isapprox(sigma2, reshape(logo_t[!, i], MN))
            if !res2
                println("Fails on LoGo MaxDist sim iteration $i")
                find_tol(sigma2, reshape(logo_t[!, i], MN); name1 = :sigma, name2 = :logo_t)
            end
            @test res2
        end

        logo_t = CSV.read(joinpath(@__DIR__, "./assets/LoGo-ExponentialSimilarity.csv"),
                          DataFrame)

        des = [Distance(; alg = CanonicalDistance()),
               DistanceDistance(; alg = CanonicalDistance()),
               Distance(; alg = SimpleDistance()), DistanceDistance(; alg = SimpleDistance()),
               Distance(; alg = SimpleAbsoluteDistance()),
               DistanceDistance(; alg = SimpleAbsoluteDistance()),
               Distance(; alg = CorrelationDistance()),
               DistanceDistance(; alg = CorrelationDistance()), Distance(; alg = LogDistance()),
               DistanceDistance(; alg = LogDistance()),
               Distance(; alg = VariationInfoDistance()),
               DistanceDistance(; alg = VariationInfoDistance())]
        desg = [GeneralDistance(; alg = CanonicalDistance()),
                GeneralDistanceDistance(; alg = CanonicalDistance()),
                GeneralDistance(; alg = SimpleDistance()),
                GeneralDistanceDistance(; alg = SimpleDistance()),
                GeneralDistance(; alg = SimpleAbsoluteDistance()),
                GeneralDistanceDistance(; alg = SimpleAbsoluteDistance()),
                GeneralDistance(; alg = CorrelationDistance()),
                GeneralDistanceDistance(; alg = CorrelationDistance()),
                GeneralDistance(; alg = LogDistance()),
                GeneralDistanceDistance(; alg = LogDistance()),
                GeneralDistance(; alg = VariationInfoDistance()),
                GeneralDistanceDistance(; alg = VariationInfoDistance())]
        for i in eachindex(des)
            sigma1 = copy(sigma)
            sigma2 = copy(sigma)
            PortfolioOptimisers.matrix_processing_algorithm!(PortfolioOptimisers.LoGo(;
                                                                                      dist = des[i],
                                                                                      sim = ExponentialSimilarity()),
                                                             Posdef(), sigma1, X)
            PortfolioOptimisers.matrix_processing_algorithm!(PortfolioOptimisers.LoGo(;
                                                                                      dist = desg[i],
                                                                                      sim = ExponentialSimilarity()),
                                                             Posdef(), sigma2, X)
            MN = size(sigma1)
            res1 = isapprox(sigma1, reshape(logo_t[!, i], MN))
            if !res1
                println("Fails on LoGo ExpDist sim iteration $i")
                find_tol(sigma1, reshape(logo_t[!, i], MN); name1 = :sigma, name2 = :logo_t)
            end
            @test res1

            res2 = isapprox(sigma2, reshape(logo_t[!, i], MN))
            if !res2
                println("Fails on LoGo ExpDist sim iteration $i")
                find_tol(sigma2, reshape(logo_t[!, i], MN); name1 = :sigma, name2 = :logo_t)
            end
            @test res2
        end

        @test isnothing(PortfolioOptimisers.logo!(nothing))
    end
    =#
end
