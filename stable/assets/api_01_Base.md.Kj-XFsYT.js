import{_ as l,C as p,c as n,o as d,j as t,a,aA as o,G as i,w as r}from"./chunks/framework.R0IdGF5w.js";const j=JSON.parse('{"title":"Base","description":"","frontmatter":{},"headers":[],"relativePath":"api/01_Base.md","filePath":"api/01_Base.md","lastUpdated":null}'),c={name:"api/01_Base.md"},u={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""};function f(h,s,g,A,k,_){const e=p("Badge");return d(),n("div",null,[s[12]||(s[12]=t("h1",{id:"Base",tabindex:"-1"},[a("Base "),t("a",{class:"header-anchor",href:"#Base","aria-label":'Permalink to "Base {#Base}"'},"â€‹")],-1)),t("details",u,[t("summary",null,[s[0]||(s[0]=t("a",{id:"PortfolioOptimisers.AbstractEstimator",href:"#PortfolioOptimisers.AbstractEstimator"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractEstimator")],-1)),s[1]||(s[1]=a()),i(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Abstract supertype for all estimator types in PortfolioOptimisers.jl.</p><p>All custom estimators (e.g., for moments, risk, or priors) should subtype <code>AbstractEstimator</code>. This enables a consistent interface for estimation routines throughout the package.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/01_Base#PortfolioOptimisers.AbstractAlgorithm"><code>AbstractAlgorithm</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/01_Base#PortfolioOptimisers.AbstractResult"><code>AbstractResult</code></a></p></li></ul>',5)),i(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[2]||(s[2]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/fe683221de9c286d3407716a4e5140c3eb021aba/src/01_Base.jl#L1-L13",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",b,[t("summary",null,[s[4]||(s[4]=t("a",{id:"PortfolioOptimisers.AbstractAlgorithm",href:"#PortfolioOptimisers.AbstractAlgorithm"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractAlgorithm")],-1)),s[5]||(s[5]=a()),i(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractAlgorithm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Abstract supertype for all algorithm types in PortfolioOptimisers.jl.</p><p>All algorithms (e.g., solvers, metaheuristics) should subtype <code>AbstractAlgorithm</code>. This allows for flexible extension and dispatch of routines.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/01_Base#PortfolioOptimisers.AbstractEstimator"><code>AbstractEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/01_Base#PortfolioOptimisers.AbstractResult"><code>AbstractResult</code></a></p></li></ul>',5)),i(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[6]||(s[6]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/fe683221de9c286d3407716a4e5140c3eb021aba/src/01_Base.jl#L15-L27",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",m,[t("summary",null,[s[8]||(s[8]=t("a",{id:"PortfolioOptimisers.AbstractResult",href:"#PortfolioOptimisers.AbstractResult"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractResult")],-1)),s[9]||(s[9]=a()),i(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Abstract supertype for all result types returned by optimizers in PortfolioOptimisers.jl.</p><p>All result objects (e.g., optimization outputs, solution summaries) should subtype <code>AbstractResult</code>. This ensures a unified interface for accessing results across different estimators and algorithms.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/01_Base#PortfolioOptimisers.AbstractEstimator"><code>AbstractEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/01_Base#PortfolioOptimisers.AbstractAlgorithm"><code>AbstractAlgorithm</code></a></p></li></ul>',5)),i(e,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[10]||(s[10]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/fe683221de9c286d3407716a4e5140c3eb021aba/src/01_Base.jl#L29-L41",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const P=l(c,[["render",f]]);export{j as __pageData,P as default};
