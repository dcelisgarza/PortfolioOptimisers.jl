import{_ as p,C as r,c as h,o,j as i,a as n,aA as e,G as t,w as l}from"./chunks/framework.R0IdGF5w.js";const x=JSON.parse('{"title":"Phylogeny Constraints","description":"","frontmatter":{},"headers":[],"relativePath":"api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.md","filePath":"api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.md","lastUpdated":null}'),k={name:"api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.md"},d={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""};function j(O,s,v,B,T,G){const a=r("Badge");return o(),h("div",null,[s[62]||(s[62]=i("h1",{id:"Phylogeny-Constraints",tabindex:"-1"},[n("Phylogeny Constraints "),i("a",{class:"header-anchor",href:"#Phylogeny-Constraints","aria-label":'Permalink to "Phylogeny Constraints {#Phylogeny-Constraints}"'},"â€‹")],-1)),i("details",d,[i("summary",null,[s[0]||(s[0]=i("a",{id:"PortfolioOptimisers.SemiDefinitePhylogenyEstimator",href:"#PortfolioOptimisers.SemiDefinitePhylogenyEstimator"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.SemiDefinitePhylogenyEstimator")],-1)),s[1]||(s[1]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SemiDefinitePhylogenyEstimator{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Estimator for generating semi-definite phylogeny-based constraints in PortfolioOptimisers.jl.</p><p><code>SemiDefinitePhylogenyEstimator</code> constructs constraints based on phylogenetic or clustering structures among assets, using a semi-definite matrix representation. The estimator wraps a phylogeny or clustering estimator and a non-negative penalty parameter <code>p</code>, which controls the strength of the constraint.</p><p><strong>Fields</strong></p><ul><li><p><code>pe</code>: Phylogeny or clustering estimator.</p></li><li><p><code>p</code>: Non-negative penalty parameter for the constraint.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SemiDefinitePhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               pe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Validation</strong></p><ul><li><code>p &gt;= 0</code>.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SemiDefinitePhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SemiDefinitePhylogenyEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NetworkEstimator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisersCovariance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Covariance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    me </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimpleExpectedReturns</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeneralWeightedCovariance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleCovariance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimpleCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   mp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultMatrixProcessing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       pdm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Posdef</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnionAll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NearestCorrelationMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Newton</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   denoise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    detone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    de </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Distance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CanonicalDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KruskalTree</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   kwargs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogeny"><code>SemiDefinitePhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/11_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyEstimator"><code>AbstractPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/11_Phylogeny/2_Clustering#PortfolioOptimisers.AbstractClusteringResult"><code>AbstractClusteringResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.phylogeny_constraints"><code>phylogeny_constraints</code></a></p></li></ul>`,13)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L35-L100",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[s[4]||(s[4]=i("a",{id:"PortfolioOptimisers.SemiDefinitePhylogeny",href:"#PortfolioOptimisers.SemiDefinitePhylogeny"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.SemiDefinitePhylogeny")],-1)),s[5]||(s[5]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SemiDefinitePhylogeny{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Container for the result of semi-definite phylogeny-based constraint generation.</p><p><code>SemiDefinitePhylogeny</code> stores the constraint matrix <code>A</code> and penalty parameter <code>p</code> resulting from a semi-definite phylogeny constraint estimator. This type is used to encapsulate the output of phylogeny-based constraint routines, enabling composable and modular constraint handling in portfolio optimisation workflows.</p><p><strong>Fields</strong></p><ul><li><p><code>A</code>: Phylogeny matrix encoding a relationship graph.</p></li><li><p><code>p</code>: Non-negative penalty parameter controlling the strength of the constraint.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SemiDefinitePhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhylogenyResult{&lt;:AbstractMatrix{&lt;:Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                               &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Validation</strong></p><ul><li><p><code>issymmetric(A)</code> and <code>all(x -&gt; iszero(x), diag(A))</code>.</p></li><li><p><code>p &gt;= 0</code>.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SemiDefinitePhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SemiDefinitePhylogeny</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Ã—</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogenyEstimator"><code>SemiDefinitePhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintResult"><code>AbstractPhylogenyConstraintResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.phylogeny_constraints"><code>phylogeny_constraints</code></a></p></li></ul>`,13)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[6]||(s[6]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L116-L160",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[s[8]||(s[8]=i("a",{id:"PortfolioOptimisers.IntegerPhylogenyEstimator",href:"#PortfolioOptimisers.IntegerPhylogenyEstimator"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.IntegerPhylogenyEstimator")],-1)),s[9]||(s[9]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegerPhylogenyEstimator{T1, T2, T3} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Estimator for generating integer phylogeny-based constraints in PortfolioOptimisers.jl.</p><p><code>IntegerPhylogenyEstimator</code> constructs constraints based on phylogenetic or clustering structures among assets, using integer or discrete representations. The estimator wraps a phylogeny or clustering estimator, a non-negative integer or vector of integers <code>B</code> specifying group sizes or allocations, and a big-M parameter <code>scale</code> used for formulating the MIP constraints.</p><p><strong>Fields</strong></p><ul><li><p><code>pe</code>: Phylogeny or clustering estimator.</p></li><li><p><code>B</code>: Non-negative integer or vector of integers specifying group sizes or allocations.</p></li><li><p><code>scale</code>: Non-negative big-M parameter for the MIP formulation.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IntegerPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                          pe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                          B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:Integer, &lt;:AbstractVector{&lt;:Integer}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                          scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Validation</strong></p><ul><li><p>If <code>B</code> is a vector: <code>!isempty(B)</code>, <code>all(x -&gt; x &gt;= 0, B)</code>, and if <code>pe</code> is a clustering estimator, its length length must be at most the maximum number of clusters/predefined number of clusters in the estimator.</p></li><li><p>If <code>B</code> is an integer: <code>B &gt;= 0</code>.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> IntegerPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IntegerPhylogenyEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     pe </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NetworkEstimator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisersCovariance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Covariance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    me </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimpleExpectedReturns</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeneralWeightedCovariance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleCovariance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimpleCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   mp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultMatrixProcessing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       pdm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Posdef</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnionAll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NearestCorrelationMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Newton</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   denoise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    detone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    de </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Distance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CanonicalDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KruskalTree</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   kwargs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000.0</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogeny"><code>IntegerPhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintEstimator"><code>AbstractPhylogenyConstraintEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/11_Phylogeny/2_Clustering#PortfolioOptimisers.AbstractClusteringResult"><code>AbstractClusteringResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.phylogeny_constraints"><code>phylogeny_constraints</code></a></p></li></ul>`,13)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[10]||(s[10]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L199-L269",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",E,[i("summary",null,[s[12]||(s[12]=i("a",{id:"PortfolioOptimisers.IntegerPhylogeny",href:"#PortfolioOptimisers.IntegerPhylogeny"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.IntegerPhylogeny")],-1)),s[13]||(s[13]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[15]||(s[15]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegerPhylogeny{T1, T2, T3} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Container for the result of integer phylogeny-based constraint generation.</p><p><code>IntegerPhylogeny</code> stores the constraint matrix <code>A</code>, group sizes or allocations <code>B</code>, and scaling parameter <code>scale</code> resulting from an integer phylogeny constraint estimator. This type encapsulates the output of integer/discrete phylogeny-based constraint routines, enabling composable and modular constraint handling in portfolio optimisation workflows.</p><p><strong>Fields</strong></p><ul><li><p><code>A</code>: Phylogeny matrix encoding asset relationships.</p></li><li><p><code>B</code>: Non-negative integer or vector of integers specifying group sizes or allocations.</p></li><li><p><code>scale</code>: Non-negative scaling parameter (big-M) for the constraint.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IntegerPhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhylogenyResult{&lt;:AbstractMatrix{&lt;:Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                          &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:Integer, &lt;:AbstractVector{&lt;:Integer}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Validation</strong></p><ul><li><p><code>issymmetric(A)</code> and <code>all(x -&gt; iszero(x), diag(A))</code>.</p></li><li><p>If <code>B</code> is a vector: <code>!isempty(B)</code>, <code>all(x -&gt; x &gt;= 0, B)</code>, and <code>size(unique(A + I; dims = 1), 1) == length(B)</code>.</p></li><li><p>If <code>B</code> is an integer: <code>B &gt;= 0</code>.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> IntegerPhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IntegerPhylogeny</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Ã—</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000.0</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogenyEstimator"><code>IntegerPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintResult"><code>AbstractPhylogenyConstraintResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.phylogeny_constraints"><code>phylogeny_constraints</code></a></p></li></ul>`,13)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[14]||(s[14]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L295-L345",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",c,[i("summary",null,[s[16]||(s[16]=i("a",{id:"PortfolioOptimisers.phylogeny_constraints",href:"#PortfolioOptimisers.phylogeny_constraints"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.phylogeny_constraints")],-1)),s[17]||(s[17]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[19]||(s[19]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">phylogeny_constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(est</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SemiDefinitePhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IntegerPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SemiDefinitePhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IntegerPhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Nothing}, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate phylogeny-based portfolio constraints from an estimator or result.</p><p><code>phylogeny_constraints</code> constructs constraint objects based on phylogenetic, clustering, or network structures among assets. It supports both semi-definite and integer constraint forms, accepting either an estimator (which wraps a phylogeny or clustering model and penalty parameters) or a precomputed result. If <code>est</code> is <code>nothing</code>, returns <code>nothing</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>est</code>: A phylogeny constraint estimator, result, or <code>nothing</code>.</p></li><li><p><code>X</code>: Data matrix of asset features or returns (ignored when <code>est</code> is not an estimator).</p></li><li><p><code>dims</code>: Dimension along which to compute the phylogeny (ignored when <code>est</code> is not an estimator).</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to the underlying phylogeny matrix routine (ignored when <code>est</code> is not an estimator).</p></li></ul><p><strong>Returns</strong></p><ul><li><p><code>SemiDefinitePhylogeny</code>: For semi-definite constraint estimators/results.</p></li><li><p><code>IntegerPhylogeny</code>: For integer constraint estimators/results.</p></li><li><p><code>nothing</code>: If <code>est</code> is <code>nothing</code>.</p></li></ul><p><strong>Details</strong></p><ul><li><p>If <code>est</code> is an estimator, computes the phylogeny matrix using the estimator.</p></li><li><p>If <code>est</code> is a result, returns it unchanged.</p></li><li><p>If <code>est</code> is <code>nothing</code>, returns <code>nothing</code>.</p></li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogenyEstimator"><code>SemiDefinitePhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogenyEstimator"><code>IntegerPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogeny"><code>SemiDefinitePhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogeny"><code>IntegerPhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintEstimator"><code>AbstractPhylogenyConstraintEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintResult"><code>AbstractPhylogenyConstraintResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/11_Phylogeny/5_Phylogeny#PortfolioOptimisers.phylogeny_matrix"><code>phylogeny_matrix</code></a></p></li></ul>`,11)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[18]||(s[18]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L376-L416",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",u,[i("summary",null,[s[20]||(s[20]=i("a",{id:"PortfolioOptimisers.MinValue",href:"#PortfolioOptimisers.MinValue"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.MinValue")],-1)),s[21]||(s[21]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MinValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VectorToRealMeasure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Algorithm for reducing a vector of real values to its minimum.</p><p><code>MinValue</code> is a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> that returns the minimum value of a vector. It is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics by their minimum.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MinValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>`,7)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[22]||(s[22]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L450-L473",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[s[24]||(s[24]=i("a",{id:"PortfolioOptimisers.MeanValue",href:"#PortfolioOptimisers.MeanValue"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.MeanValue")],-1)),s[25]||(s[25]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[27]||(s[27]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MeanValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VectorToRealMeasure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Algorithm for reducing a vector of real values to its mean.</p><p><code>MeanValue</code> is a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> that returns the mean (average) value of a vector. It is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics by their mean.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MeanValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.7666666666666666</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>`,7)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[26]||(s[26]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L475-L498",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",F,[i("summary",null,[s[28]||(s[28]=i("a",{id:"PortfolioOptimisers.MedianValue",href:"#PortfolioOptimisers.MedianValue"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.MedianValue")],-1)),s[29]||(s[29]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[31]||(s[31]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MedianValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VectorToRealMeasure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Algorithm for reducing a vector of real values to its median.</p><p><code>MedianValue</code> is a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> that returns the median value of a vector. It is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics by their median.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MedianValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>`,7)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[30]||(s[30]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L500-L523",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[s[32]||(s[32]=i("a",{id:"PortfolioOptimisers.MaxValue",href:"#PortfolioOptimisers.MaxValue"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.MaxValue")],-1)),s[33]||(s[33]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[35]||(s[35]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MaxValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VectorToRealMeasure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Algorithm for reducing a vector of real values to its maximum.</p><p><code>MaxValue</code> is a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> that returns the maximum value of a vector. It is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics by their maximum.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MaxValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>`,7)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[34]||(s[34]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L525-L548",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[s[36]||(s[36]=i("a",{id:"PortfolioOptimisers.CentralityConstraint",href:"#PortfolioOptimisers.CentralityConstraint"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.CentralityConstraint")],-1)),s[37]||(s[37]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[39]||(s[39]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CentralityConstraint{T1, T2, T3} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    comp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Estimator for generating centrality-based portfolio constraints.</p><p><code>CentralityConstraint</code> constructs constraints based on asset centrality measures within a phylogeny or network structure. It wraps a centrality estimator <code>A</code>, a <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> measure or threshold <code>B</code>, and a comparison operator <code>comp</code> <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperator"><code>ComparisonOperator</code></a>. This enables flexible constraint generation based on asset centrality, supporting both inequality and equality forms.</p><p><strong>Fields</strong></p><ul><li><p><code>A</code>: Centrality estimator.</p></li><li><p><code>B</code>: Real value or reduction measure.</p></li><li><p><code>comp</code>: Comparison operator.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CentralityEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:Real, &lt;:VectorToRealMeasure}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MinValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     comp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ComparisonOperator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LEQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CentralityConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CentralityConstraint</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CentralityEstimator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     ne </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NetworkEstimator</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisersCovariance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Covariance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    me </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SimpleExpectedReturns</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GeneralWeightedCovariance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleCovariance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimpleCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   mp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DefaultMatrixProcessing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       pdm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Posdef</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">           |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UnionAll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NearestCorrelationMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Newton</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   denoise </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    detone </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    de </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Distance</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CanonicalDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KruskalTree</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   kwargs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   cent </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DegreeCentrality</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">       |</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   kwargs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MinValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  comp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LEQ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LEQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/11_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperator"><code>ComparisonOperator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.centrality_constraints"><code>centrality_constraints</code></a></p></li></ul>`,11)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[38]||(s[38]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L601-L668",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",A,[i("summary",null,[s[40]||(s[40]=i("a",{id:"PortfolioOptimisers.centrality_constraints",href:"#PortfolioOptimisers.centrality_constraints"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.centrality_constraints")],-1)),s[41]||(s[41]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[44]||(s[44]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centrality_constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ccs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                  &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:CentralityConstraint}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                       X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate centrality-based linear constraints from one or more <code>CentralityConstraint</code> estimators.</p><p><code>centrality_constraints</code> constructs linear constraints for portfolio optimisation based on asset centrality measures within a phylogeny or network structure. It accepts one or more <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a> estimators, computes centrality vectors for the given data matrix <code>X</code>, applies the specified reduction measure or threshold, and assembles the resulting constraints into a <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a> object.</p><p><strong>Arguments</strong></p><ul><li><p><code>ccs</code>: A single <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a> or a vector of such estimators.</p></li><li><p><code>X</code>: Data matrix of asset features or returns.</p></li><li><p><code>dims</code>: Dimension along which to compute centrality.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to the centrality estimator.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>lc::Union{Nothing, &lt;:LinearConstraint}</code>: An object containing the assembled inequality and equality constraints, or <code>nothing</code> if no constraints are present.</li></ul><p><strong>Details</strong></p><ul><li><p>For each constraint, computes the centrality vector using the estimator in <code>cc.A</code>.</p></li><li><p>Applies the comparison operator and reduction measure or threshold in <code>cc.B</code> and <code>cc.comp</code>.</p></li><li><p>Aggregates constraints into equality and inequality forms.</p></li><li><p>Returns <code>nothing</code> if no valid constraints are generated.</p></li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.PartialLinearConstraint"><code>PartialLinearConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/11_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li></ul>`,11)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[42]||(s[42]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L684-L719",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[45]||(s[45]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centrality_constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ccs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, &lt;:LinearConstraint}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>No-op fallback for centrality-based constraint propagation.</p><p>This method returns the input <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a> object or <code>nothing</code> unchanged. It is used to pass through an already constructed centrality-based constraint object, enabling composability and uniform interface handling in constraint generation workflows.</p><p><strong>Arguments</strong></p><ul><li><p><code>ccs</code>: An existing <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a> object or <code>nothing</code>.</p></li><li><p><code>args...</code>: Additional positional arguments (ignored).</p></li><li><p><code>kwargs...</code>: Additional keyword arguments (ignored).</p></li></ul><p><strong>Returns</strong></p><ul><li><code>ccs</code>: The input constraint object or <code>nothing</code>, unchanged.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.centrality_constraints"><code>centrality_constraints</code></a></p></li></ul>',9)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[43]||(s[43]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L769-L793",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",b,[i("summary",null,[s[46]||(s[46]=i("a",{id:"PortfolioOptimisers.AbstractPhylogenyConstraintEstimator",href:"#PortfolioOptimisers.AbstractPhylogenyConstraintEstimator"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyConstraintEstimator")],-1)),s[47]||(s[47]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[49]||(s[49]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyConstraintEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractConstraintEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny-based constraint estimators in PortfolioOptimisers.jl.</p><p>All concrete types representing phylogeny-based constraint estimators should subtype <code>AbstractPhylogenyConstraintEstimator</code>. This enables a consistent, composable interface for generating constraints based on phylogenetic, clustering, or network structures among assets.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogenyEstimator"><code>SemiDefinitePhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogenyEstimator"><code>IntegerPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.AbstractConstraintEstimator"><code>AbstractConstraintEstimator</code></a></p></li></ul>',5)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[48]||(s[48]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L1-L16",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",P,[i("summary",null,[s[50]||(s[50]=i("a",{id:"PortfolioOptimisers.AbstractPhylogenyConstraintResult",href:"#PortfolioOptimisers.AbstractPhylogenyConstraintResult"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyConstraintResult")],-1)),s[51]||(s[51]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[53]||(s[53]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyConstraintResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractConstraintResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny-based constraint result types in PortfolioOptimisers.jl.</p><p>All concrete types representing the results of phylogeny-based constraint generation should subtype <code>AbstractPhylogenyConstraintResult</code>. This enables a consistent, composable interface for storing and propagating constraint matrices, vectors, or other outputs derived from phylogenetic, clustering, or network structures among assets.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogeny"><code>SemiDefinitePhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogeny"><code>IntegerPhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.AbstractConstraintResult"><code>AbstractConstraintResult</code></a></p></li></ul>',5)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[52]||(s[52]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L18-L33",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",D,[i("summary",null,[s[54]||(s[54]=i("a",{id:"PortfolioOptimisers.VectorToRealMeasure",href:"#PortfolioOptimisers.VectorToRealMeasure"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.VectorToRealMeasure")],-1)),s[55]||(s[55]=n()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[57]||(s[57]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VectorToRealMeasure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for algorithms mapping a vector of real values to a single real value.</p><p><code>VectorToRealMeasure</code> provides a unified interface for algorithms that reduce a vector of real numbers to a scalar, such as minimum, mean, median, or maximum. These are used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>',5)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[56]||(s[56]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L431-L448",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",_,[i("summary",null,[s[58]||(s[58]=i("a",{id:"PortfolioOptimisers.vec_to_real_measure",href:"#PortfolioOptimisers.vec_to_real_measure"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.vec_to_real_measure")],-1)),s[59]||(s[59]=n()),t(a,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[61]||(s[61]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(measure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:VectorToRealMeasure, &lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reduce a vector of real values to a single real value using a specified measure.</p><p><code>vec_to_real_measure</code> applies a reduction algorithm (such as minimum, mean, median, or maximum) to a vector of real numbers, as specified by the concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a>. This is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics.</p><p><strong>Arguments</strong></p><ul><li><p><code>measure</code>: An instance of a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a>, or the predefined value to return.</p></li><li><p><code>val</code>: A vector of real values to be reduced (ignored if <code>measure</code> is a real value).</p></li></ul><p><strong>Returns</strong></p><ul><li><code>score::Real</code>: computed value according to <code>measure</code>.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MaxValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li></ul>`,11)),t(a,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[60]||(s[60]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/4cd418494de6dd1f0cf8a31743cf6d01241ac4be/src/12_ConstraintGeneration/3_PhylogenyConstraintGeneration.jl#L550-L585",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const M=p(k,[["render",j]]);export{x as __pageData,M as default};
