import{_ as o,C as r,c as p,o as h,j as s,a as e,aA as n,G as a,w as l}from"./chunks/framework.R0IdGF5w.js";const R=JSON.parse('{"title":"Phylogeny Constraints","description":"","frontmatter":{},"headers":[],"relativePath":"api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration.md","filePath":"api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration.md","lastUpdated":null}'),k={name:"api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration.md"},d={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""};function B(T,i,D,G,V,x){const t=r("Badge");return h(),p("div",null,[i[70]||(i[70]=s("h1",{id:"Phylogeny-Constraints",tabindex:"-1"},[e("Phylogeny Constraints "),s("a",{class:"header-anchor",href:"#Phylogeny-Constraints","aria-label":'Permalink to "Phylogeny Constraints {#Phylogeny-Constraints}"'},"​")],-1)),s("details",d,[s("summary",null,[i[0]||(i[0]=s("a",{id:"PortfolioOptimisers.SemiDefinitePhylogenyEstimator",href:"#PortfolioOptimisers.SemiDefinitePhylogenyEstimator"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.SemiDefinitePhylogenyEstimator")],-1)),i[1]||(i[1]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SemiDefinitePhylogenyEstimator{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Estimator for generating semi-definite phylogeny-based constraints in PortfolioOptimisers.jl.</p><p><code>SemiDefinitePhylogenyEstimator</code> constructs constraints based on phylogenetic or clustering structures among assets, using a semi-definite matrix representation. The estimator wraps a phylogeny or clustering estimator and a non-negative penalty parameter <code>p</code>, which controls the strength of the constraint.</p><p><strong>Fields</strong></p><ul><li><p><code>pe</code>: Phylogeny or clustering estimator.</p></li><li><p><code>p</code>: Non-negative penalty parameter for the constraint.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SemiDefinitePhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               pe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                         &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                               p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Validation</strong></p><ul><li><code>p &gt;= 0</code>.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SemiDefinitePhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SemiDefinitePhylogenyEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  pe ┼ NetworkEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │    ce ┼ PortfolioOptimisersCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │   ce ┼ Covariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │    me ┼ SimpleExpectedReturns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │       │   w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │    ce ┼ GeneralCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │       │   ce ┼ StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleCovariance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimpleCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │       │    w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │   alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │   mp ┼ DefaultMatrixProcessing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │       pdm ┼ Posdef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │           │   alg ┴ UnionAll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NearestCorrelationMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Newton</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │   denoise ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │    detone ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │      │       alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │    de ┼ Distance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │   power ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │     alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CanonicalDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │   alg ┼ KruskalTree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │     args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │       │   kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     │     n ┴ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   p ┴ Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogeny"><code>SemiDefinitePhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyEstimator"><code>AbstractPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_Phylogeny/2_Clustering#PortfolioOptimisers.AbstractClusteringResult"><code>AbstractClusteringResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.phylogeny_constraints"><code>phylogeny_constraints</code></a></p></li></ul>`,13)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[2]||(i[2]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L31-L93",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",g,[s("summary",null,[i[4]||(i[4]=s("a",{id:"PortfolioOptimisers.SemiDefinitePhylogeny",href:"#PortfolioOptimisers.SemiDefinitePhylogeny"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.SemiDefinitePhylogeny")],-1)),i[5]||(i[5]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SemiDefinitePhylogeny{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Container for the result of semi-definite phylogeny-based constraint generation.</p><p><code>SemiDefinitePhylogeny</code> stores the constraint matrix <code>A</code> and penalty parameter <code>p</code> resulting from a semi-definite phylogeny constraint estimator. This type is used to encapsulate the output of phylogeny-based constraint routines, enabling composable and modular constraint handling in portfolio optimisation workflows.</p><p><strong>Fields</strong></p><ul><li><p><code>A</code>: Phylogeny matrix encoding a relationship graph.</p></li><li><p><code>p</code>: Non-negative penalty parameter controlling the strength of the constraint.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SemiDefinitePhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhylogenyResult{&lt;:AbstractMatrix{&lt;:Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                               &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Validation</strong></p><ul><li><p><code>issymmetric(A)</code> and <code>all(iszero, diag(A))</code>.</p></li><li><p><code>p &gt;= 0</code>.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SemiDefinitePhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.05</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SemiDefinitePhylogeny</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  A ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  p ┴ Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.05</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogenyEstimator"><code>SemiDefinitePhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintResult"><code>AbstractPhylogenyConstraintResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.phylogeny_constraints"><code>phylogeny_constraints</code></a></p></li></ul>`,13)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[6]||(i[6]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L109-L149",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",y,[s("summary",null,[i[8]||(i[8]=s("a",{id:"PortfolioOptimisers.IntegerPhylogenyEstimator",href:"#PortfolioOptimisers.IntegerPhylogenyEstimator"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.IntegerPhylogenyEstimator")],-1)),i[9]||(i[9]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegerPhylogenyEstimator{T1, T2, T3} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    pe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Estimator for generating integer phylogeny-based constraints in PortfolioOptimisers.jl.</p><p><code>IntegerPhylogenyEstimator</code> constructs constraints based on phylogenetic or clustering structures among assets, using integer or discrete representations. The estimator wraps a phylogeny or clustering estimator, a non-negative integer or vector of integers <code>B</code> specifying group sizes or allocations, and a big-M parameter <code>scale</code> used for formulating the MIP constraints.</p><p><strong>Fields</strong></p><ul><li><p><code>pe</code>: Phylogeny or clustering estimator.</p></li><li><p><code>B</code>: Non-negative integer or vector of integers specifying group sizes or allocations.</p></li><li><p><code>scale</code>: Non-negative big-M parameter for the MIP formulation.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IntegerPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                          pe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                    &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                          B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:Integer, &lt;:AbstractVector{&lt;:Integer}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                          scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Validation</strong></p><ul><li><code>B</code> is validated with <a href="/PortfolioOptimisers.jl/stable/api/02_Tools#PortfolioOptimisers.assert_nonneg_finite_val"><code>assert_nonneg_finite_val</code></a>. <ul><li><code>AbstractVector</code>: it is additionally validated with <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.validate_length_integer_phylogeny_constraint_B"><code>validate_length_integer_phylogeny_constraint_B</code></a>.</li></ul></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> IntegerPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IntegerPhylogenyEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     pe ┼ NetworkEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │    ce ┼ PortfolioOptimisersCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │   ce ┼ Covariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │    me ┼ SimpleExpectedReturns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │       │   w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │    ce ┼ GeneralCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │       │   ce ┼ StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleCovariance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimpleCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │       │    w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │   alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │   mp ┼ DefaultMatrixProcessing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │       pdm ┼ Posdef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │           │   alg ┴ UnionAll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NearestCorrelationMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Newton</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │   denoise ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │    detone ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │      │       alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │    de ┼ Distance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │   power ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │     alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CanonicalDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │   alg ┼ KruskalTree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │     args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │       │   kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        │     n ┴ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      B ┼ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scale ┴ Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000.0</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogeny"><code>IntegerPhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintEstimator"><code>AbstractPhylogenyConstraintEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_Phylogeny/2_Clustering#PortfolioOptimisers.AbstractClusteringResult"><code>AbstractClusteringResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.phylogeny_constraints"><code>phylogeny_constraints</code></a></p></li></ul>`,13)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[10]||(i[10]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L255-L323",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",c,[s("summary",null,[i[12]||(i[12]=s("a",{id:"PortfolioOptimisers.IntegerPhylogeny",href:"#PortfolioOptimisers.IntegerPhylogeny"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.IntegerPhylogeny")],-1)),i[13]||(i[13]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[15]||(i[15]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> IntegerPhylogeny{T1, T2, T3} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Container for the result of integer phylogeny-based constraint generation.</p><p><code>IntegerPhylogeny</code> stores the constraint matrix <code>A</code>, group sizes or allocations <code>B</code>, and scaling parameter <code>scale</code> resulting from an integer phylogeny constraint estimator. This type encapsulates the output of integer/discrete phylogeny-based constraint routines, enabling composable and modular constraint handling in portfolio optimisation workflows.</p><p><strong>Fields</strong></p><ul><li><p><code>A</code>: Phylogeny matrix encoding asset relationships.</p></li><li><p><code>B</code>: Non-negative integer or vector of integers specifying group sizes or allocations.</p></li><li><p><code>scale</code>: Non-negative scaling parameter (big-M) for the constraint.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IntegerPhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhylogenyResult{&lt;:AbstractMatrix{&lt;:Real}}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                          &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:Integer, &lt;:AbstractVector{&lt;:Integer}}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 scale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Validation</strong></p><ul><li><p><code>issymmetric(A)</code> and <code>all(iszero, diag(A))</code>.</p></li><li><p><code>B</code> is validated with <a href="/PortfolioOptimisers.jl/stable/api/02_Tools#PortfolioOptimisers.assert_nonneg_finite_val"><code>assert_nonneg_finite_val</code></a>.</p><ul><li><code>AbstractVector</code>: <code>size(unique(A + I; dims = 1), 1) == length(B)</code>.</li></ul></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> IntegerPhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; A </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], B </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, scale </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100_000.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">IntegerPhylogeny</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      A ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Float64}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      B ┼ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  scale ┴ Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100000.0</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogenyEstimator"><code>IntegerPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintResult"><code>AbstractPhylogenyConstraintResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.phylogeny_constraints"><code>phylogeny_constraints</code></a></p></li></ul>`,13)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[14]||(i[14]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L346-L394",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",E,[s("summary",null,[i[16]||(i[16]=s("a",{id:"PortfolioOptimisers.phylogeny_constraints",href:"#PortfolioOptimisers.phylogeny_constraints"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.phylogeny_constraints")],-1)),i[17]||(i[17]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[19]||(i[19]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">phylogeny_constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(est</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SemiDefinitePhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IntegerPhylogenyEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SemiDefinitePhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                 &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">IntegerPhylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, Nothing}, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                      dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate phylogeny-based portfolio constraints from an estimator or result.</p><p><code>phylogeny_constraints</code> constructs constraint objects based on phylogenetic, clustering, or network structures among assets. It supports both semi-definite and integer constraint forms, accepting either an estimator (which wraps a phylogeny or clustering model and penalty parameters) or a precomputed result. If <code>est</code> is <code>nothing</code>, returns <code>nothing</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>est</code>: A phylogeny constraint estimator, result, or <code>nothing</code>.</p></li><li><p><code>X</code>: Data matrix of asset features or returns (ignored when <code>est</code> is not an estimator).</p></li><li><p><code>dims</code>: Dimension along which to compute the phylogeny (ignored when <code>est</code> is not an estimator).</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to the underlying phylogeny matrix routine (ignored when <code>est</code> is not an estimator).</p></li></ul><p><strong>Returns</strong></p><ul><li><p><code>SemiDefinitePhylogeny</code>: For semi-definite constraint estimators/results.</p></li><li><p><code>IntegerPhylogeny</code>: For integer constraint estimators/results.</p></li><li><p><code>nothing</code>: If <code>est</code> is <code>nothing</code>.</p></li></ul><p><strong>Details</strong></p><ul><li><code>est</code>: <ul><li><p><code>Union{&lt;:SemiDefinitePhylogenyEstimator, &lt;:IntegerPhylogenyEstimator}</code>: computes the phylogeny matrix using the estimator.</p></li><li><p><code>Union{Nothing, &lt;:SemiDefinitePhylogeny, &lt;:IntegerPhylogeny}</code>: returns it unchanged.</p></li></ul></li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogenyEstimator"><code>SemiDefinitePhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogenyEstimator"><code>IntegerPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogeny"><code>SemiDefinitePhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogeny"><code>IntegerPhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintEstimator"><code>AbstractPhylogenyConstraintEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.AbstractPhylogenyConstraintResult"><code>AbstractPhylogenyConstraintResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.phylogeny_matrix"><code>phylogeny_matrix</code></a></p></li></ul>`,11)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[18]||(i[18]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L422-L461",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",u,[s("summary",null,[i[20]||(i[20]=s("a",{id:"PortfolioOptimisers.MinValue",href:"#PortfolioOptimisers.MinValue"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.MinValue")],-1)),i[21]||(i[21]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[23]||(i[23]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MinValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VectorToRealMeasure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Algorithm for reducing a vector of real values to its minimum.</p><p><code>MinValue</code> is a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> that returns the minimum value of a vector. It is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics by their minimum.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MinValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>`,7)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[22]||(i[22]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L498-L519",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",C,[s("summary",null,[i[24]||(i[24]=s("a",{id:"PortfolioOptimisers.MeanValue",href:"#PortfolioOptimisers.MeanValue"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.MeanValue")],-1)),i[25]||(i[25]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[27]||(i[27]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MeanValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VectorToRealMeasure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Algorithm for reducing a vector of real values to its mean.</p><p><code>MeanValue</code> is a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> that returns the mean (average) value of a vector. It is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics by their mean.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MeanValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.7666666666666666</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>`,7)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[26]||(i[26]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L521-L542",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",m,[s("summary",null,[i[28]||(i[28]=s("a",{id:"PortfolioOptimisers.MedianValue",href:"#PortfolioOptimisers.MedianValue"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.MedianValue")],-1)),i[29]||(i[29]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[31]||(i[31]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MedianValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VectorToRealMeasure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Algorithm for reducing a vector of real values to its median.</p><p><code>MedianValue</code> is a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> that returns the median value of a vector. It is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics by their median.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MedianValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>`,7)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[30]||(i[30]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L544-L565",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",f,[s("summary",null,[i[32]||(i[32]=s("a",{id:"PortfolioOptimisers.MaxValue",href:"#PortfolioOptimisers.MaxValue"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.MaxValue")],-1)),i[33]||(i[33]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[35]||(i[35]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MaxValue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> VectorToRealMeasure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Algorithm for reducing a vector of real values to its maximum.</p><p><code>MaxValue</code> is a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> that returns the maximum value of a vector. It is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics by their maximum.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MaxValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>`,7)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[34]||(i[34]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L567-L588",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",_,[s("summary",null,[i[36]||(i[36]=s("a",{id:"PortfolioOptimisers.CentralityConstraint",href:"#PortfolioOptimisers.CentralityConstraint"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.CentralityConstraint")],-1)),i[37]||(i[37]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[39]||(i[39]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CentralityConstraint{T1, T2, T3} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyConstraintEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    comp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Estimator for generating centrality-based portfolio constraints.</p><p><code>CentralityConstraint</code> constructs constraints based on asset centrality measures within a phylogeny or network structure. It wraps a centrality estimator <code>A</code>, a <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a> measure or threshold <code>B</code>, and a comparison operator <code>comp</code> <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperator"><code>ComparisonOperator</code></a>. This enables flexible constraint generation based on asset centrality, supporting both inequality and equality forms.</p><p><strong>Fields</strong></p><ul><li><p><code>A</code>: Centrality estimator.</p></li><li><p><code>B</code>: Real value or reduction measure.</p></li><li><p><code>comp</code>: Comparison operator.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CentralityEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:Real, &lt;:VectorToRealMeasure}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MinValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     comp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ComparisonOperator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LEQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CentralityConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CentralityConstraint</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     A ┼ CentralityEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │     ne ┼ NetworkEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │    ce ┼ PortfolioOptimisersCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │   ce ┼ Covariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │    me ┼ SimpleExpectedReturns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │       │   w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │    ce ┼ GeneralCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │       │   ce ┼ StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleCovariance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimpleCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │       │    w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │   alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │   mp ┼ DefaultMatrixProcessing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │       pdm ┼ Posdef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │           │   alg ┴ UnionAll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NearestCorrelationMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Newton</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │   denoise ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │    detone ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │      │       alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │    de ┼ Distance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │   power ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │     alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CanonicalDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │   alg ┼ KruskalTree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │     args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │       │   kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │     n ┴ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │   cent ┼ DegreeCentrality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │     kind ┼ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │        │   kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     B ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MinValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  comp ┴ LEQ</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> LEQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperator"><code>ComparisonOperator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.centrality_constraints"><code>centrality_constraints</code></a></p></li></ul>`,11)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[38]||(i[38]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L639-L703",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",F,[s("summary",null,[i[40]||(i[40]=s("a",{id:"PortfolioOptimisers.centrality_constraints",href:"#PortfolioOptimisers.centrality_constraints"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.centrality_constraints")],-1)),i[41]||(i[41]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[44]||(i[44]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centrality_constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ccs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityConstraint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                                  &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:CentralityConstraint}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                       X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Generate centrality-based linear constraints from one or more <code>CentralityConstraint</code> estimators.</p><p><code>centrality_constraints</code> constructs linear constraints for portfolio optimisation based on asset centrality measures within a phylogeny or network structure. It accepts one or more <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a> estimators, computes centrality vectors for the given data matrix <code>X</code>, applies the specified reduction measure or threshold, and assembles the resulting constraints into a <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a> object.</p><p><strong>Arguments</strong></p><ul><li><p><code>ccs</code>: A single <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a> or a vector of such estimators.</p></li><li><p><code>X</code>: Data matrix of asset features or returns.</p></li><li><p><code>dims</code>: Dimension along which to compute centrality.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to the centrality estimator.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>lc::Union{Nothing, &lt;:LinearConstraint}</code>: An object containing the assembled inequality and equality constraints, or <code>nothing</code> if no constraints are present.</li></ul><p><strong>Details</strong></p><ul><li><p>For each constraint, computes the centrality vector using the estimator in <code>cc.A</code>.</p></li><li><p>Applies the comparison operator and reduction measure or threshold in <code>cc.B</code> and <code>cc.comp</code>.</p></li><li><p>Aggregates constraints into equality and inequality forms.</p></li><li><p>Returns <code>nothing</code> if no valid constraints are generated.</p></li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.PartialLinearConstraint"><code>PartialLinearConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li></ul>`,11)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[42]||(i[42]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L719-L752",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),i[45]||(i[45]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centrality_constraints</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ccs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, &lt;:LinearConstraint}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>No-op fallback for centrality-based constraint propagation.</p><p>This method returns the input <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a> object or <code>nothing</code> unchanged. It is used to pass through an already constructed centrality-based constraint object, enabling composability and uniform interface handling in constraint generation workflows.</p><p><strong>Arguments</strong></p><ul><li><p><code>ccs</code>: An existing <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a> object or <code>nothing</code>.</p></li><li><p><code>args...</code>: Additional positional arguments (ignored).</p></li><li><p><code>kwargs...</code>: Additional keyword arguments (ignored).</p></li></ul><p><strong>Returns</strong></p><ul><li><code>ccs</code>: The input constraint object or <code>nothing</code>, unchanged.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/2_LinearConstraintGeneration#PortfolioOptimisers.LinearConstraint"><code>LinearConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.centrality_constraints"><code>centrality_constraints</code></a></p></li></ul>',9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[43]||(i[43]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L802-L824",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",P,[s("summary",null,[i[46]||(i[46]=s("a",{id:"PortfolioOptimisers.AbstractPhylogenyConstraintEstimator",href:"#PortfolioOptimisers.AbstractPhylogenyConstraintEstimator"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyConstraintEstimator")],-1)),i[47]||(i[47]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[49]||(i[49]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyConstraintEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractConstraintEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny-based constraint estimators in PortfolioOptimisers.jl.</p><p>All concrete types representing phylogeny-based constraint estimators should subtype <code>AbstractPhylogenyConstraintEstimator</code>. This enables a consistent, composable interface for generating constraints based on phylogenetic, clustering, or network structures among assets.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogenyEstimator"><code>SemiDefinitePhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogenyEstimator"><code>IntegerPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.AbstractConstraintEstimator"><code>AbstractConstraintEstimator</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[48]||(i[48]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L1-L14",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",b,[s("summary",null,[i[50]||(i[50]=s("a",{id:"PortfolioOptimisers.AbstractPhylogenyConstraintResult",href:"#PortfolioOptimisers.AbstractPhylogenyConstraintResult"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyConstraintResult")],-1)),i[51]||(i[51]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[53]||(i[53]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyConstraintResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractConstraintResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny-based constraint result types in PortfolioOptimisers.jl.</p><p>All concrete types representing the results of phylogeny-based constraint generation should subtype <code>AbstractPhylogenyConstraintResult</code>. This enables a consistent, composable interface for storing and propagating constraint matrices, vectors, or other outputs derived from phylogenetic, clustering, or network structures among assets.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.SemiDefinitePhylogeny"><code>SemiDefinitePhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogeny"><code>IntegerPhylogeny</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.AbstractConstraintResult"><code>AbstractConstraintResult</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[52]||(i[52]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L16-L29",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",A,[s("summary",null,[i[54]||(i[54]=s("a",{id:"PortfolioOptimisers._validate_length_integer_phylogeny_constraint_B",href:"#PortfolioOptimisers._validate_length_integer_phylogeny_constraint_B"},[s("span",{class:"jlbinding"},"PortfolioOptimisers._validate_length_integer_phylogeny_constraint_B")],-1)),i[55]||(i[55]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[57]||(i[57]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_validate_length_integer_phylogeny_constraint_B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{Nothing, &lt;:Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                                                B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Validate that the length of the vector <code>B</code> does not exceed the integer value <code>alg</code>.</p><p>This function is used internally to ensure that the number of groups or allocations specified by <code>B</code> does not exceed the allowed maximum defined by <code>alg</code>. If the validation fails, a <code>DomainError</code> is thrown.</p><p><strong>Arguments</strong></p><ul><li><p><code>alg</code>:</p><ul><li><p><code>Nothing</code>: No validation is performed.</p></li><li><p><code>Integer</code>: specifying the maximum allowed length for <code>B</code>.</p></li></ul></li><li><p><code>B</code>: Vector of integers representing group sizes or allocations.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>nothing</code>: Returns nothing if validation passes.</li></ul><p><strong>Validation</strong></p><ul><li>Throws <code>DomainError</code> if <code>length(B) &gt; alg</code>.</li></ul><p><strong>Details</strong></p><ul><li><p>Checks that <code>length(B) &lt;= alg</code>.</p></li><li><p>Used in the construction and validation of integer phylogeny constraints.</p></li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.validate_length_integer_phylogeny_constraint_B"><code>validate_length_integer_phylogeny_constraint_B</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogenyEstimator"><code>IntegerPhylogenyEstimator</code></a></p></li></ul>`,13)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[56]||(i[56]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L168-L202",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",j,[s("summary",null,[i[58]||(i[58]=s("a",{id:"PortfolioOptimisers.validate_length_integer_phylogeny_constraint_B",href:"#PortfolioOptimisers.validate_length_integer_phylogeny_constraint_B"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.validate_length_integer_phylogeny_constraint_B")],-1)),i[59]||(i[59]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[61]||(i[61]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">validate_length_integer_phylogeny_constraint_B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(pe</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClusteringEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, B</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">validate_length_integer_phylogeny_constraint_B</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Validate that the length of the vector <code>B</code> does not exceed the maximum allowed by the clustering estimator <code>pe</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>pe</code>: Clustering estimator containing algorithm and maximum group information.</p></li><li><p><code>B</code>: Vector of integers representing group sizes or allocations.</p></li><li><p><code>args...</code>: No validation is performed.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>nothing</code>: Returns nothing if validation passes.</li></ul><p><strong>Validation</strong></p><ul><li><p>Throws <code>DomainError</code> if <code>length(B) &gt; pe.onc.max_k</code> (when <code>max_k</code> is set).</p></li><li><p>Calls internal <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers._validate_length_integer_phylogeny_constraint_B"><code>_validate_length_integer_phylogeny_constraint_B</code></a> for further checks.</p></li></ul><p><strong>Details</strong></p><ul><li><p>Checks if <code>pe.onc.max_k</code> is set and validates <code>length(B)</code> accordingly.</p></li><li><p>Delegates to <code>_validate_length_integer_phylogeny_constraint_B</code> for algorithm-specific validation.</p></li><li><p>Used in the construction and validation of integer phylogeny constraints.</p></li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers._validate_length_integer_phylogeny_constraint_B"><code>_validate_length_integer_phylogeny_constraint_B</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.IntegerPhylogenyEstimator"><code>IntegerPhylogenyEstimator</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[60]||(i[60]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L211-L242",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",v,[s("summary",null,[i[62]||(i[62]=s("a",{id:"PortfolioOptimisers.VectorToRealMeasure",href:"#PortfolioOptimisers.VectorToRealMeasure"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.VectorToRealMeasure")],-1)),i[63]||(i[63]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[65]||(i[65]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VectorToRealMeasure </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for algorithms mapping a vector of real values to a single real value.</p><p><code>VectorToRealMeasure</code> provides a unified interface for algorithms that reduce a vector of real numbers to a scalar, such as minimum, mean, median, or maximum. These are used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.CentralityConstraint"><code>CentralityConstraint</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.vec_to_real_measure"><code>vec_to_real_measure</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[64]||(i[64]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L481-L496",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",O,[s("summary",null,[i[66]||(i[66]=s("a",{id:"PortfolioOptimisers.vec_to_real_measure",href:"#PortfolioOptimisers.vec_to_real_measure"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.vec_to_real_measure")],-1)),i[67]||(i[67]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[69]||(i[69]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(measure</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:VectorToRealMeasure, &lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Reduce a vector of real values to a single real value using a specified measure.</p><p><code>vec_to_real_measure</code> applies a reduction algorithm (such as minimum, mean, median, or maximum) to a vector of real numbers, as specified by the concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a>. This is used in constraint generation and centrality-based portfolio constraints to aggregate asset-level metrics.</p><p><strong>Arguments</strong></p><ul><li><p><code>measure</code>: An instance of a concrete subtype of <a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a>, or the predefined value to return.</p></li><li><p><code>val</code>: A vector of real values to be reduced (ignored if <code>measure</code> is a <code>Real</code>).</p></li></ul><p><strong>Returns</strong></p><ul><li><code>score::Real</code>: computed value according to <code>measure</code>.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MaxValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">vec_to_real_measure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.9</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.VectorToRealMeasure"><code>VectorToRealMeasure</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MinValue"><code>MinValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MeanValue"><code>MeanValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MedianValue"><code>MedianValue</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/stable/api/13_ConstraintGeneration/3_PhylogenyConstraintGeneration#PortfolioOptimisers.MaxValue"><code>MaxValue</code></a></p></li></ul>`,11)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...i[68]||(i[68]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d44e6e67706d02e309682f26cec05ed8a1f11f46/src/13_ConstraintGeneration/03_PhylogenyConstraintGeneration.jl#L590-L623",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const S=o(k,[["render",B]]);export{R as __pageData,S as default};
