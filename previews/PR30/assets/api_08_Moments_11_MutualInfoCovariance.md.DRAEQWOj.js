import{_ as l,C as r,c as p,o as h,j as s,a as e,aA as n,G as t,w as o}from"./chunks/framework.B_pglgTr.js";const b=JSON.parse('{"title":"Mutual Information Covariance","description":"","frontmatter":{},"headers":[],"relativePath":"api/08_Moments/11_MutualInfoCovariance.md","filePath":"api/08_Moments/11_MutualInfoCovariance.md","lastUpdated":null}'),d={name:"api/08_Moments/11_MutualInfoCovariance.md"},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""};function g(m,i,f,E,y,C){const a=r("Badge");return h(),p("div",null,[i[12]||(i[12]=s("h1",{id:"Mutual-Information-Covariance",tabindex:"-1"},[e("Mutual Information Covariance "),s("a",{class:"header-anchor",href:"#Mutual-Information-Covariance","aria-label":'Permalink to "Mutual Information Covariance {#Mutual-Information-Covariance}"'},"​")],-1)),s("details",c,[s("summary",null,[i[0]||(i[0]=s("a",{id:"PortfolioOptimisers.MutualInfoCovariance",href:"#PortfolioOptimisers.MutualInfoCovariance"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.MutualInfoCovariance")],-1)),i[1]||(i[1]=e()),t(a,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MutualInfoCovariance{T1, T2, T3} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCovarianceEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    bins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    normalise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Covariance estimator based on mutual information.</p><p><code>MutualInfoCovariance</code> implements a robust covariance estimator that uses mutual information (MI) to capture both linear and nonlinear dependencies between asset returns. This estimator is particularly useful for identifying complex relationships that are not detected by traditional correlation-based methods. The MI matrix is optionally normalised and then rescaled by marginal standard deviations to produce a covariance matrix.</p><p><strong>Fields</strong></p><ul><li><p><code>ve</code>: Variance estimator used to compute marginal standard deviations.</p></li><li><p><code>bins</code>: Binning algorithm or fixed number of bins for histogram-based MI estimation.</p></li><li><p><code>normalise</code>: Whether to normalise the MI matrix.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MutualInfoCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; ve</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVarianceEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SimpleVariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     bins</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:AbstractBins, &lt;:Integer}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HacineGharbiRavier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                     normalise</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Validation</strong></p><ul><li>If <code>bins</code> is an integer, <code>bins &gt; 0</code>.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> MutualInfoCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">MutualInfoCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">         ve ┼ SimpleVariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            │          me ┼ SimpleExpectedReturns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            │             │   w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            │           w ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            │   corrected ┴ Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       bins ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HacineGharbiRavier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  normalise ┴ Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/01_Base_Moments#PortfolioOptimisers.AbstractVarianceEstimator"><code>AbstractVarianceEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/10_Histogram#PortfolioOptimisers.AbstractBins"><code>AbstractBins</code></a></p></li></ul>`,14)),t(a,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...i[2]||(i[2]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ae27e70f9e4e5f42d20a6ddbf6ffcc69df3cbd2a/src/08_Moments/11_MutualInfoCovariance.jl#L1-L48",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",k,[s("summary",null,[i[4]||(i[4]=s("a",{id:"Statistics.cov-Tuple{MutualInfoCovariance, AbstractMatrix}",href:"#Statistics.cov-Tuple{MutualInfoCovariance, AbstractMatrix}"},[s("span",{class:"jlbinding"},"Statistics.cov")],-1)),i[5]||(i[5]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[7]||(i[7]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MutualInfoCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the mutual information (MI) covariance matrix using a <a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/11_MutualInfoCovariance#PortfolioOptimisers.MutualInfoCovariance"><code>MutualInfoCovariance</code></a> estimator.</p><p>This method computes the pairwise mutual information covariance matrix for the input data matrix <code>X</code>, using the binning strategy and normalisation specified in <code>ce</code>. The MI covariance matrix is obtained by rescaling the MI correlation matrix by the marginal standard deviations, as estimated by the variance estimator in <code>ce</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>ce</code>: Mutual information-based covariance estimator.</p></li><li><p><code>X</code>: Data matrix of asset returns (observations × assets).</p></li><li><p><code>dims</code>: Dimension along which to compute the covariance.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to the variance estimator.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>sigma::Matrix{&lt;:Real}</code>: Symmetric matrix of mutual information-based covariances.</li></ul><p><strong>Validation</strong></p><ul><li><code>dims</code> is either <code>1</code> or <code>2</code>.</li></ul><p><strong>Examples</strong></p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/11_MutualInfoCovariance#PortfolioOptimisers.MutualInfoCovariance"><code>MutualInfoCovariance</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/10_Histogram#PortfolioOptimisers.mutual_info"><code>mutual_info</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/11_MutualInfoCovariance#Statistics.cor-Tuple{MutualInfoCovariance, AbstractMatrix}"><code>cor(ce::MutualInfoCovariance, X::AbstractMatrix; dims::Int = 1, kwargs...)</code></a></p></li></ul>',12)),t(a,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...i[6]||(i[6]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ae27e70f9e4e5f42d20a6ddbf6ffcc69df3cbd2a/src/08_Moments/11_MutualInfoCovariance.jl#L106-L135",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",u,[s("summary",null,[i[8]||(i[8]=s("a",{id:"Statistics.cor-Tuple{MutualInfoCovariance, AbstractMatrix}",href:"#Statistics.cor-Tuple{MutualInfoCovariance, AbstractMatrix}"},[s("span",{class:"jlbinding"},"Statistics.cor")],-1)),i[9]||(i[9]=e()),t(a,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[11]||(i[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">MutualInfoCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the mutual information (MI) correlation matrix using a <a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/11_MutualInfoCovariance#PortfolioOptimisers.MutualInfoCovariance"><code>MutualInfoCovariance</code></a> estimator.</p><p>This method computes the pairwise mutual information correlation matrix for the input data matrix <code>X</code>, using the binning strategy and normalisation specified in <code>ce</code>. The MI correlation captures both linear and nonlinear dependencies between asset returns, making it robust to complex relationships that may not be detected by traditional correlation measures.</p><p><strong>Arguments</strong></p><ul><li><p><code>ce</code>: Mutual information-based covariance estimator.</p></li><li><p><code>X</code>: Data matrix of asset returns (observations × assets).</p></li><li><p><code>dims</code>: Dimension along which to compute the correlation.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments (currently unused).</p></li></ul><p><strong>Returns</strong></p><ul><li><code>rho::Matrix{&lt;:Real}</code>: Symmetric matrix of mutual information-based correlation coefficients.</li></ul><p><strong>Validation</strong></p><ul><li><code>dims</code> is either <code>1</code> or <code>2</code>.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/11_MutualInfoCovariance#PortfolioOptimisers.MutualInfoCovariance"><code>MutualInfoCovariance</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/10_Histogram#PortfolioOptimisers.mutual_info"><code>mutual_info</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR30/api/08_Moments/11_MutualInfoCovariance#Statistics.cov-Tuple{MutualInfoCovariance, AbstractMatrix}"><code>cov(ce::MutualInfoCovariance, X::AbstractMatrix; dims::Int = 1, kwargs...)</code></a></p></li></ul>',11)),t(a,{type:"info",class:"source-link",text:"source"},{default:o(()=>[...i[10]||(i[10]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ae27e70f9e4e5f42d20a6ddbf6ffcc69df3cbd2a/src/08_Moments/11_MutualInfoCovariance.jl#L70-L97",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const M=l(d,[["render",g]]);export{b as __pageData,M as default};
