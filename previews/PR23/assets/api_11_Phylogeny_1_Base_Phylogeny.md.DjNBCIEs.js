import{_ as r,C as n,c as p,o as y,j as s,a as l,aA as o,G as i,w as a}from"./chunks/framework.Bf1PV6LJ.js";const A=JSON.parse('{"title":"Base Phylogeny","description":"","frontmatter":{},"headers":[],"relativePath":"api/11_Phylogeny/1_Base_Phylogeny.md","filePath":"api/11_Phylogeny/1_Base_Phylogeny.md","lastUpdated":null}'),h={name:"api/11_Phylogeny/1_Base_Phylogeny.md"},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},d={class:"jldocstring custom-block",open:""};function P(b,e,m,f,u,_){const t=n("Badge");return y(),p("div",null,[e[12]||(e[12]=s("h1",{id:"Base-Phylogeny",tabindex:"-1"},[l("Base Phylogeny "),s("a",{class:"header-anchor",href:"#Base-Phylogeny","aria-label":'Permalink to "Base Phylogeny {#Base-Phylogeny}"'},"â€‹")],-1)),s("details",g,[s("summary",null,[e[0]||(e[0]=s("a",{id:"PortfolioOptimisers.AbstractPhylogenyEstimator",href:"#PortfolioOptimisers.AbstractPhylogenyEstimator"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyEstimator")],-1)),e[1]||(e[1]=l()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[3]||(e[3]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny estimator types in PortfolioOptimisers.jl.</p><p>All concrete types implementing phylogeny-based estimation algorithms should subtype <code>AbstractPhylogenyEstimator</code>. This enables a consistent interface for phylogeny estimators throughout the package.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR23/api/11_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyAlgorithm"><code>AbstractPhylogenyAlgorithm</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR23/api/11_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyResult"><code>AbstractPhylogenyResult</code></a></p></li></ul>',5)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...e[2]||(e[2]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/9e067fb8e90ca71cf7bce03e2e340f81ef08f556/src/12_Phylogeny/01_Base_Phylogeny.jl#L1-L14",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",c,[s("summary",null,[e[4]||(e[4]=s("a",{id:"PortfolioOptimisers.AbstractPhylogenyAlgorithm",href:"#PortfolioOptimisers.AbstractPhylogenyAlgorithm"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyAlgorithm")],-1)),e[5]||(e[5]=l()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[7]||(e[7]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyAlgorithm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny algorithm types in PortfolioOptimisers.jl.</p><p>All concrete types implementing specific phylogeny algorithms should subtype <code>AbstractPhylogenyAlgorithm</code>. This enables flexible extension and dispatch of phylogeny routines.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR23/api/11_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyEstimator"><code>AbstractPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR23/api/11_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyResult"><code>AbstractPhylogenyResult</code></a></p></li></ul>',5)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...e[6]||(e[6]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/9e067fb8e90ca71cf7bce03e2e340f81ef08f556/src/12_Phylogeny/01_Base_Phylogeny.jl#L16-L29",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",d,[s("summary",null,[e[8]||(e[8]=s("a",{id:"PortfolioOptimisers.AbstractPhylogenyResult",href:"#PortfolioOptimisers.AbstractPhylogenyResult"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyResult")],-1)),e[9]||(e[9]=l()),i(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),e[11]||(e[11]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny result types in PortfolioOptimisers.jl.</p><p>All concrete types representing the result of a phylogeny estimation should subtype <code>AbstractPhylogenyResult</code>. This enables a consistent interface for phylogeny results throughout the package.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR23/api/11_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyEstimator"><code>AbstractPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR23/api/11_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyAlgorithm"><code>AbstractPhylogenyAlgorithm</code></a></p></li></ul>',5)),i(t,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...e[10]||(e[10]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/9e067fb8e90ca71cf7bce03e2e340f81ef08f556/src/12_Phylogeny/01_Base_Phylogeny.jl#L31-L44",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const j=r(h,[["render",P]]);export{A as __pageData,j as default};
