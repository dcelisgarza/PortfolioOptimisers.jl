import{_ as r,C as n,c as p,o as y,j as t,a as l,aA as o,G as i,w as a}from"./chunks/framework.De8WfqNi.js";const A=JSON.parse('{"title":"Base Phylogeny","description":"","frontmatter":{},"headers":[],"relativePath":"api/12_Phylogeny/1_Base_Phylogeny.md","filePath":"api/12_Phylogeny/1_Base_Phylogeny.md","lastUpdated":null}'),h={name:"api/12_Phylogeny/1_Base_Phylogeny.md"},g={class:"jldocstring custom-block",open:""},d={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""};function P(b,s,m,u,f,_){const e=n("Badge");return y(),p("div",null,[s[12]||(s[12]=t("h1",{id:"Base-Phylogeny",tabindex:"-1"},[l("Base Phylogeny "),t("a",{class:"header-anchor",href:"#Base-Phylogeny","aria-label":'Permalink to "Base Phylogeny {#Base-Phylogeny}"'},"â€‹")],-1)),t("details",g,[t("summary",null,[s[0]||(s[0]=t("a",{id:"PortfolioOptimisers.AbstractPhylogenyEstimator",href:"#PortfolioOptimisers.AbstractPhylogenyEstimator"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyEstimator")],-1)),s[1]||(s[1]=l()),i(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny estimator types in PortfolioOptimisers.jl.</p><p>All concrete types implementing phylogeny-based estimation algorithms should subtype <code>AbstractPhylogenyEstimator</code>. This enables a consistent interface for phylogeny estimators throughout the package.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR26/api/12_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyAlgorithm"><code>AbstractPhylogenyAlgorithm</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR26/api/12_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyResult"><code>AbstractPhylogenyResult</code></a></p></li></ul>',5)),i(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...s[2]||(s[2]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d813b7bd017090749081b6f5b161920f7d81f11e/src/12_Phylogeny/01_Base_Phylogeny.jl#L1-L12",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",d,[t("summary",null,[s[4]||(s[4]=t("a",{id:"PortfolioOptimisers.AbstractPhylogenyAlgorithm",href:"#PortfolioOptimisers.AbstractPhylogenyAlgorithm"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyAlgorithm")],-1)),s[5]||(s[5]=l()),i(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyAlgorithm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny algorithm types in PortfolioOptimisers.jl.</p><p>All concrete types implementing specific phylogeny algorithms should subtype <code>AbstractPhylogenyAlgorithm</code>. This enables flexible extension and dispatch of phylogeny routines.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR26/api/12_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyEstimator"><code>AbstractPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR26/api/12_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyResult"><code>AbstractPhylogenyResult</code></a></p></li></ul>',5)),i(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...s[6]||(s[6]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d813b7bd017090749081b6f5b161920f7d81f11e/src/12_Phylogeny/01_Base_Phylogeny.jl#L14-L25",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",c,[t("summary",null,[s[8]||(s[8]=t("a",{id:"PortfolioOptimisers.AbstractPhylogenyResult",href:"#PortfolioOptimisers.AbstractPhylogenyResult"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPhylogenyResult")],-1)),s[9]||(s[9]=l()),i(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPhylogenyResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all phylogeny result types in PortfolioOptimisers.jl.</p><p>All concrete types representing the result of a phylogeny estimation should subtype <code>AbstractPhylogenyResult</code>. This enables a consistent interface for phylogeny results throughout the package.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR26/api/12_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyEstimator"><code>AbstractPhylogenyEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR26/api/12_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyAlgorithm"><code>AbstractPhylogenyAlgorithm</code></a></p></li></ul>',5)),i(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...s[10]||(s[10]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/d813b7bd017090749081b6f5b161920f7d81f11e/src/12_Phylogeny/01_Base_Phylogeny.jl#L27-L38",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const j=r(h,[["render",P]]);export{A as __pageData,j as default};
