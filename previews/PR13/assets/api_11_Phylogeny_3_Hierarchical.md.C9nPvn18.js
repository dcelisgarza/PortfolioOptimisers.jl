import{_ as o,C as n,c as p,o as d,j as s,a as l,aA as r,G as t,w as a}from"./chunks/framework.DT6M8m-X.js";const B=JSON.parse('{"title":"Hierarchical","description":"","frontmatter":{},"headers":[],"relativePath":"api/11_Phylogeny/3_Hierarchical.md","filePath":"api/11_Phylogeny/3_Hierarchical.md","lastUpdated":null}'),h={name:"api/11_Phylogeny/3_Hierarchical.md"},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""};function C(F,i,v,j,A,O){const e=n("Badge");return d(),p("div",null,[i[44]||(i[44]=s("h1",{id:"Hierarchical",tabindex:"-1"},[l("Hierarchical "),s("a",{class:"header-anchor",href:"#Hierarchical","aria-label":'Permalink to "Hierarchical {#Hierarchical}"'},"â€‹")],-1)),s("details",c,[s("summary",null,[i[0]||(i[0]=s("a",{id:"PortfolioOptimisers.ClusterNode",href:"#PortfolioOptimisers.ClusterNode"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.ClusterNode")],-1)),i[1]||(i[1]=l()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=r(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClusterNode{tid, tl, tr, td, tcnt} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tid</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    left</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tl</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    right</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tr</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">td</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    level</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">tcnt</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Node type for representing clusters in a hierarchical clustering tree.</p><p><code>ClusterNode</code> encapsulates the structure of a node in a clustering tree, including its unique identifier, left and right child nodes, height, and level in the tree. Leaf nodes have <code>left</code> and <code>right</code> set to <code>nothing</code>.</p><p><strong>Fields</strong></p><ul><li><p><code>id</code>: Unique identifier for the node.</p></li><li><p><code>left</code>: Left child node.</p></li><li><p><code>right</code>: Right child node.</p></li><li><p><code>height</code>: Height of the node in the tree.</p></li><li><p><code>level</code>: Level of the node in the tree.</p></li></ul><p><strong>Constructor</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ClusterNode(id, left::Union{Nothing, &lt;:ClusterNode} = nothing,</span></span>
<span class="line"><span>            right::Union{Nothing, &lt;:ClusterNode} = nothing, height::Real = 0.0,</span></span>
<span class="line"><span>            level::Int = 1)</span></span></code></pre></div><p>Positional and keyword arguments correspond to the fields above. The <code>level</code> is automatically computed based on the levels of child nodes if they exist.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ClusterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ClusterNode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    left </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   right </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   level </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.is_leaf"><code>is_leaf</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.pre_order"><code>pre_order</code></a></p></li></ul>`,12)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[2]||(i[2]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L1-L48",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",k,[s("summary",null,[i[4]||(i[4]=s("a",{id:"PortfolioOptimisers.is_leaf",href:"#PortfolioOptimisers.is_leaf"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.is_leaf")],-1)),i[5]||(i[5]=l()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[7]||(i[7]=r(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_leaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClusterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Determine if a <code>ClusterNode</code> is a leaf node.</p><p>Returns <code>true</code> if the node has no left child (<code>left == nothing</code>), indicating it is a leaf in the clustering tree.</p><p><strong>Arguments</strong></p><ul><li><code>a</code>: The node to check.</li></ul><p><strong>Returns</strong></p><ul><li><code>Bool</code>: <code>true</code> if the node is a leaf, <code>false</code> otherwise.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">is_leaf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClusterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.ClusterNode"><code>ClusterNode</code></a></li></ul>`,11)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[6]||(i[6]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L67-L94",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",g,[s("summary",null,[i[8]||(i[8]=s("a",{id:"PortfolioOptimisers.PreorderTreeByID",href:"#PortfolioOptimisers.PreorderTreeByID"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.PreorderTreeByID")],-1)),i[9]||(i[9]=l()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PreorderTreeByID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPreorderBy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Preorder traversal strategy that visits nodes by their ID.</p><p><code>PreorderTreeByID</code> is used to specify that preorder traversal should be performed using the node&#39;s <code>id</code> property.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.AbstractPreorderBy"><code>AbstractPreorderBy</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.get_node_property"><code>get_node_property</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.pre_order"><code>pre_order</code></a></p></li></ul>',5)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[10]||(i[10]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L115-L129",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",u,[s("summary",null,[i[12]||(i[12]=s("a",{id:"PortfolioOptimisers.pre_order",href:"#PortfolioOptimisers.pre_order"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.pre_order")],-1)),i[13]||(i[13]=l()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[15]||(i[15]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pre_order</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClusterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; preorder_by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPreorderBy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PreorderTreeByID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Perform a preorder traversal of a hierarchical clustering tree.</p><p>Returns a vector of node properties (by default, node IDs) in preorder (root, left, right) order. The traversal strategy can be customised by providing a subtype of <code>AbstractPreorderBy</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>a</code>: The root node of the tree.</p></li><li><p><code>preorder_by</code>: Traversal strategy.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Vector{Int}</code>: Vector of node properties in preorder.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.ClusterNode"><code>ClusterNode</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.AbstractPreorderBy"><code>AbstractPreorderBy</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.PreorderTreeByID"><code>PreorderTreeByID</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.get_node_property"><code>get_node_property</code></a></p></li></ul>',9)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[14]||(i[14]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L157-L181",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",y,[s("summary",null,[i[16]||(i[16]=s("a",{id:"PortfolioOptimisers.to_tree",href:"#PortfolioOptimisers.to_tree"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.to_tree")],-1)),i[17]||(i[17]=l()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[19]||(i[19]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to_tree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Hclust</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Convert a hierarchical clustering result to a tree of <code>ClusterNode</code> objects.</p><p>This function takes a hierarchical clustering object from <a href="https://juliastats.org/Clustering.jl/stable/hclust.html" target="_blank" rel="noreferrer"><code>Clustering.jl</code></a> and constructs a tree representation using <code>ClusterNode</code> nodes. It returns the root node and a vector of all nodes in the tree.</p><p><strong>Arguments</strong></p><ul><li><code>a</code>: Hierarchical clustering object.</li></ul><p><strong>Returns</strong></p><ul><li><p><code>root::ClusterNode</code>: The root node of the clustering tree.</p></li><li><p><code>nodes::Vector{ClusterNode}</code>: Vector containing all nodes in the tree.</p></li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.ClusterNode"><code>ClusterNode</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.pre_order"><code>pre_order</code></a></p></li></ul>',9)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[18]||(i[18]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L214-L236",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",f,[s("summary",null,[i[20]||(i[20]=s("a",{id:"PortfolioOptimisers.optimal_number_clusters",href:"#PortfolioOptimisers.optimal_number_clusters"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.optimal_number_clusters")],-1)),i[21]||(i[21]=l()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[23]||(i[23]=r(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optimal_number_clusters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OptimalNumberClusters{&lt;:Any, &lt;:Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, clustering</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Hclust</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optimal_number_clusters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OptimalNumberClusters{&lt;:Any, &lt;:SecondOrderDifference}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clustering</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Hclust</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optimal_number_clusters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(onc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OptimalNumberClusters{&lt;:Any, &lt;:StandardisedSilhouetteScore}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                        clustering</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Hclust</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Select the optimal number of clusters for a hierarchical clustering tree.</p><p>This function applies the specified optimal number of clusters estimator (<code>onc</code>) to a hierarchical clustering result and distance matrix, using the configured algorithm (e.g., <a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/2_Clustering#PortfolioOptimisers.SecondOrderDifference"><code>SecondOrderDifference</code></a>, <a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/2_Clustering#PortfolioOptimisers.StandardisedSilhouetteScore"><code>StandardisedSilhouetteScore</code></a>, or given directly). The selection is based on cluster validity and scoring metrics.</p><p><strong>Arguments</strong></p><ul><li><p><code>onc</code>: Optimal number of clusters estimator.</p><ul><li><p><code>onc::OptimalNumberClusters{&lt;:Any, &lt;:Integer}</code>: Uses a user-specified fixed number of clusters <code>k</code> directly. If <code>k</code> is not valid, searches above and below for the nearest valid cluster count.</p></li><li><p><code>onc::OptimalNumberClusters{&lt;:Any, &lt;:SecondOrderDifference}</code>: Computes the second-order difference of a clustering evaluation metric for each possible cluster count, and selects the first valid <code>k</code> that maximises the difference.</p></li><li><p><code>onc::OptimalNumberClusters{&lt;:Any, &lt;:StandardisedSilhouetteScore}</code>: Computes the standardised silhouette score for each possible cluster count, and selects the first valid <code>k</code> that maximises the score.</p></li></ul></li><li><p><code>clustering</code>: Hierarchical clustering object.</p></li><li><p><code>dist</code>: Distance matrix used for clustering.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Integer</code>: Selected optimal number of clusters.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/2_Clustering#PortfolioOptimisers.OptimalNumberClusters"><code>OptimalNumberClusters</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.valid_k_clusters"><code>valid_k_clusters</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.validate_k_value"><code>validate_k_value</code></a></p></li></ul>`,9)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[22]||(i[22]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L382-L416",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",m,[s("summary",null,[i[24]||(i[24]=s("a",{id:"PortfolioOptimisers.clusterise-Tuple{ClusteringEstimator{<:Any, <:Any, <:HClustAlgorithm}, AbstractMatrix{<:Real}}",href:"#PortfolioOptimisers.clusterise-Tuple{ClusteringEstimator{<:Any, <:Any, <:HClustAlgorithm}, AbstractMatrix{<:Real}}"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.clusterise")],-1)),i[25]||(i[25]=l()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),i[27]||(i[27]=r(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clusterise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClusteringEstimator{&lt;:Any, &lt;:Any, &lt;:HClustAlgorithm, &lt;:Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{&lt;:Real}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; branchorder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :optimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Run hierarchical clustering and return the result as a <a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/2_Clustering#PortfolioOptimisers.HierarchicalClustering"><code>HierarchicalClustering</code></a> object.</p><p>This function applies the specified clustering estimator to the input data matrix, computes the similarity and distance matrices, performs hierarchical clustering, and selects the optimal number of clusters. The result is returned as a <code>HierarchicalClustering</code> object.</p><p><strong>Arguments</strong></p><ul><li><p><code>cle</code>: Clustering estimator.</p></li><li><p><code>X</code>: Data matrix (observations Ã— assets).</p></li><li><p><code>branchorder</code>: Branch ordering strategy for hierarchical clustering.</p></li><li><p><code>dims</code>: Dimension along which to cluster.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>res::HierarchicalClustering</code>: Result object containing clustering, similarity, distance matrices, and number of clusters.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/2_Clustering#PortfolioOptimisers.HierarchicalClustering"><code>HierarchicalClustering</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/2_Clustering#PortfolioOptimisers.ClusteringEstimator"><code>ClusteringEstimator</code></a></p></li></ul>`,9)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[26]||(i[26]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L257-L284",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",_,[s("summary",null,[i[28]||(i[28]=s("a",{id:"PortfolioOptimisers.get_node_property",href:"#PortfolioOptimisers.get_node_property"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.get_node_property")],-1)),i[29]||(i[29]=l()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[31]||(i[31]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">get_node_property</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(preorder_by</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PreorderTreeByID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClusterNode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Get the property of a node used for preorder traversal.</p><p>For <code>PreorderTreeByID</code>, this returns the node&#39;s <code>id</code>.</p><p><strong>Arguments</strong></p><ul><li><p><code>preorder_by</code>: Preorder traversal strategy.</p></li><li><p><code>a</code>: The node.</p></li></ul><p><strong>Returns</strong></p><ul><li>The node&#39;s identifier.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.PreorderTreeByID"><code>PreorderTreeByID</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.pre_order"><code>pre_order</code></a></p></li></ul>',9)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[30]||(i[30]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L132-L154",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",E,[s("summary",null,[i[32]||(i[32]=s("a",{id:"PortfolioOptimisers.AbstractPreorderBy",href:"#PortfolioOptimisers.AbstractPreorderBy"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractPreorderBy")],-1)),i[33]||(i[33]=l()),t(e,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[35]||(i[35]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractPreorderBy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all preorder traversal strategies in PortfolioOptimisers.jl.</p><p>Concrete types implementing specific preorder traversal logic should subtype <code>AbstractPreorderBy</code>. This enables flexible extension and dispatch of preorder routines for hierarchical clustering trees.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.PreorderTreeByID"><code>PreorderTreeByID</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.pre_order"><code>pre_order</code></a></p></li></ul>',5)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[34]||(i[34]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L99-L112",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",b,[s("summary",null,[i[36]||(i[36]=s("a",{id:"PortfolioOptimisers.validate_k_value",href:"#PortfolioOptimisers.validate_k_value"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.validate_k_value")],-1)),i[37]||(i[37]=l()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[39]||(i[39]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">validate_k_value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clustering</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Hclust</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, nodes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{&lt;:ClusterNode}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Validate whether a given number of clusters <code>k</code> is consistent with the hierarchical clustering tree.</p><p>This function checks if the clustering assignment for <code>k</code> clusters is compatible with the tree structure, ensuring that each non-leaf node&#39;s children correspond to valid clusters.</p><p><strong>Arguments</strong></p><ul><li><p><code>clustering</code>: Hierarchical clustering object.</p></li><li><p><code>nodes</code>: Vector of nodes in the clustering tree.</p></li><li><p><code>k</code>: Number of clusters to validate.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>flag::Bool</code>: <code>true</code> if <code>k</code> is a valid number of clusters, <code>false</code> otherwise.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.optimal_number_clusters"><code>optimal_number_clusters</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.ClusterNode"><code>ClusterNode</code></a></p></li></ul>',9)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[38]||(i[38]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L294-L317",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",P,[s("summary",null,[i[40]||(i[40]=s("a",{id:"PortfolioOptimisers.valid_k_clusters",href:"#PortfolioOptimisers.valid_k_clusters"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.valid_k_clusters")],-1)),i[41]||(i[41]=l()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[43]||(i[43]=r('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">valid_k_clusters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(clustering</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Hclust</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Find a valid number of clusters for a hierarchical clustering tree given a scoring array.</p><p>This function iteratively searches for a valid <code>k</code> (number of clusters) by checking the scoring array and validating each candidate using <a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.validate_k_value"><code>validate_k_value</code></a>. Returns the first valid <code>k</code> found, or <code>1</code> if none are valid.</p><p><strong>Arguments</strong></p><ul><li><p><code>clustering</code>: Hierarchical clustering object.</p></li><li><p><code>arr</code>: Array of scores for each possible number of clusters.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>k::Integer</code>: Valid number of clusters.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.validate_k_value"><code>validate_k_value</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/11_Phylogeny/3_Hierarchical#PortfolioOptimisers.optimal_number_clusters"><code>optimal_number_clusters</code></a></p></li></ul>',9)),t(e,{type:"info",class:"source-link",text:"source"},{default:a(()=>[...i[42]||(i[42]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/e46c13f941840d17e7a8c70f1cd39e8f6cf327fb/src/11_Phylogeny/3_Hierarchical.jl#L344-L366",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const D=o(h,[["render",C]]);export{B as __pageData,D as default};
