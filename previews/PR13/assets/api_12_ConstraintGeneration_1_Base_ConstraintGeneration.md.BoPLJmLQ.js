import{_ as r,C as l,c as p,o as d,j as i,a,aA as o,G as e,w as n}from"./chunks/framework.DT6M8m-X.js";const T=JSON.parse('{"title":"Base Constraint Generation","description":"","frontmatter":{},"headers":[],"relativePath":"api/12_ConstraintGeneration/1_Base_ConstraintGeneration.md","filePath":"api/12_ConstraintGeneration/1_Base_ConstraintGeneration.md","lastUpdated":null}'),h={name:"api/12_ConstraintGeneration/1_Base_ConstraintGeneration.md"},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""};function E(b,s,O,P,j,G){const t=l("Badge");return d(),p("div",null,[s[36]||(s[36]=i("h1",{id:"Base-Constraint-Generation",tabindex:"-1"},[a("Base Constraint Generation "),i("a",{class:"header-anchor",href:"#Base-Constraint-Generation","aria-label":'Permalink to "Base Constraint Generation {#Base-Constraint-Generation}"'},"â€‹")],-1)),i("details",k,[i("summary",null,[s[0]||(s[0]=i("a",{id:"PortfolioOptimisers.EQ",href:"#PortfolioOptimisers.EQ"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.EQ")],-1)),s[1]||(s[1]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EqualityComparisonOperators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Equality comparison operator for constraint generation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EqualityComparisonOperators"><code>EqualityComparisonOperators</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.LEQ"><code>LEQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.GEQ"><code>GEQ</code></a></p></li></ul>',4)),e(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ed07be968999af3333786bcb250368effd0e17ac/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L82-L94",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",c,[i("summary",null,[s[4]||(s[4]=i("a",{id:"PortfolioOptimisers.LEQ",href:"#PortfolioOptimisers.LEQ"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.LEQ")],-1)),s[5]||(s[5]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LEQ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> InequalityComparisonOperators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Less-than-or-equal-to comparison operator for constraint generation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.InequalityComparisonOperators"><code>InequalityComparisonOperators</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EQ"><code>EQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.GEQ"><code>GEQ</code></a></p></li></ul>',4)),e(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[6]||(s[6]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ed07be968999af3333786bcb250368effd0e17ac/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L97-L109",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",g,[i("summary",null,[s[8]||(s[8]=i("a",{id:"PortfolioOptimisers.GEQ",href:"#PortfolioOptimisers.GEQ"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.GEQ")],-1)),s[9]||(s[9]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GEQ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> InequalityComparisonOperators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Greater-than-or-equal-to comparison operator for constraint generation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.InequalityComparisonOperators"><code>InequalityComparisonOperators</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EQ"><code>EQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.LEQ"><code>LEQ</code></a></p></li></ul>',4)),e(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[10]||(s[10]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ed07be968999af3333786bcb250368effd0e17ac/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L112-L124",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",u,[i("summary",null,[s[12]||(s[12]=i("a",{id:"PortfolioOptimisers.AbstractConstraintResult",href:"#PortfolioOptimisers.AbstractConstraintResult"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractConstraintResult")],-1)),s[13]||(s[13]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[15]||(s[15]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractConstraintResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all constraint result types in PortfolioOptimisers.jl.</p><p>All concrete types representing the result of constraint generation or evaluation should subtype <code>AbstractConstraintResult</code>. This enables a consistent interface for handling constraint results across different estimators and algorithms.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.AbstractConstraintEstimator"><code>AbstractConstraintEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/01_Base#PortfolioOptimisers.AbstractResult"><code>AbstractResult</code></a></p></li></ul>',5)),e(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[14]||(s[14]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ed07be968999af3333786bcb250368effd0e17ac/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L1-L14",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[s[16]||(s[16]=i("a",{id:"PortfolioOptimisers.AbstractConstraintEstimator",href:"#PortfolioOptimisers.AbstractConstraintEstimator"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractConstraintEstimator")],-1)),s[17]||(s[17]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[19]||(s[19]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractConstraintEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all constraint estimator types in PortfolioOptimisers.jl.</p><p>All concrete types implementing constraint generation or estimation algorithms should subtype <code>AbstractConstraintEstimator</code>. This enables extensible and composable workflows for constraint construction and validation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.AbstractConstraintResult"><code>AbstractConstraintResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/01_Base#PortfolioOptimisers.AbstractEstimator"><code>AbstractEstimator</code></a></p></li></ul>',5)),e(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[18]||(s[18]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ed07be968999af3333786bcb250368effd0e17ac/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L17-L30",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[s[20]||(s[20]=i("a",{id:"PortfolioOptimisers.ComparisonOperators",href:"#PortfolioOptimisers.ComparisonOperators"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.ComparisonOperators")],-1)),s[21]||(s[21]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ComparisonOperators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Abstract supertype for all comparison operator types used in constraint generation.</p><p>Concrete subtypes represent specific comparison semantics (e.g., equality, inequality) for use in constraint definitions and evaluation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EqualityComparisonOperators"><code>EqualityComparisonOperators</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.InequalityComparisonOperators"><code>InequalityComparisonOperators</code></a></p></li></ul>',5)),e(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[22]||(s[22]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ed07be968999af3333786bcb250368effd0e17ac/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L33-L46",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",_,[i("summary",null,[s[24]||(s[24]=i("a",{id:"PortfolioOptimisers.EqualityComparisonOperators",href:"#PortfolioOptimisers.EqualityComparisonOperators"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.EqualityComparisonOperators")],-1)),s[25]||(s[25]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[27]||(s[27]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EqualityComparisonOperators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ComparisonOperators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all equality comparison operator types.</p><p>Concrete subtypes represent equality-based comparison semantics (e.g., <code>EQ</code>) for use in constraint definitions.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperators"><code>ComparisonOperators</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EQ"><code>EQ</code></a></p></li></ul>',5)),e(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[26]||(s[26]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ed07be968999af3333786bcb250368effd0e17ac/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L49-L62",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[s[28]||(s[28]=i("a",{id:"PortfolioOptimisers.InequalityComparisonOperators",href:"#PortfolioOptimisers.InequalityComparisonOperators"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.InequalityComparisonOperators")],-1)),s[29]||(s[29]=a()),e(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[31]||(s[31]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InequalityComparisonOperators </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ComparisonOperators</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all inequality comparison operator types.</p><p>Concrete subtypes represent inequality-based comparison semantics (e.g., <code>LEQ</code>, <code>GEQ</code>) for use in constraint definitions.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperators"><code>ComparisonOperators</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.LEQ"><code>LEQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.GEQ"><code>GEQ</code></a></p></li></ul>',5)),e(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[30]||(s[30]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ed07be968999af3333786bcb250368effd0e17ac/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L65-L79",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[s[32]||(s[32]=i("a",{id:"PortfolioOptimisers.comparison_sign_ineq_flag",href:"#PortfolioOptimisers.comparison_sign_ineq_flag"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.comparison_sign_ineq_flag")],-1)),s[33]||(s[33]=a()),e(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[35]||(s[35]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparison_sign_ineq_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ComparisonOperators</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the multiplicative sign and inequality flag for a given comparison operator.</p><p><strong>Arguments</strong></p><ul><li><code>op::ComparisonOperators</code>: The comparison operator.</li></ul><p><strong>Returns</strong></p><ul><li><p><code>sign</code>: The multiplicative sign for the constraint.</p></li><li><p><code>is_inequality</code>: <code>true</code> if the operator is an inequality, <code>false</code> for equality.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparison_sign_ineq_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparison_sign_ineq_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LEQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparison_sign_ineq_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GEQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EQ"><code>EQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.LEQ"><code>LEQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.GEQ"><code>GEQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR13/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperators"><code>ComparisonOperators</code></a></p></li></ul>`,10)),e(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...s[34]||(s[34]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/ed07be968999af3333786bcb250368effd0e17ac/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L127-L162",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const v=r(h,[["render",E]]);export{T as __pageData,v as default};
