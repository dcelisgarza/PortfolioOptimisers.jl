import{_ as r,C as l,c as p,o as d,j as s,a as e,aA as o,G as a,w as n}from"./chunks/framework.bg8IzWYn.js";const T=JSON.parse('{"title":"Base Constraint Generation","description":"","frontmatter":{},"headers":[],"relativePath":"api/12_ConstraintGeneration/1_Base_ConstraintGeneration.md","filePath":"api/12_ConstraintGeneration/1_Base_ConstraintGeneration.md","lastUpdated":null}'),h={name:"api/12_ConstraintGeneration/1_Base_ConstraintGeneration.md"},k={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""};function E(b,i,O,P,j,G){const t=l("Badge");return d(),p("div",null,[i[36]||(i[36]=s("h1",{id:"Base-Constraint-Generation",tabindex:"-1"},[e("Base Constraint Generation "),s("a",{class:"header-anchor",href:"#Base-Constraint-Generation","aria-label":'Permalink to "Base Constraint Generation {#Base-Constraint-Generation}"'},"â€‹")],-1)),s("details",k,[s("summary",null,[i[0]||(i[0]=s("a",{id:"PortfolioOptimisers.EQ",href:"#PortfolioOptimisers.EQ"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.EQ")],-1)),i[1]||(i[1]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[3]||(i[3]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EQ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EqualityComparisonOperator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Equality comparison operator for constraint generation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EqualityComparisonOperator"><code>EqualityComparisonOperator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.LEQ"><code>LEQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.GEQ"><code>GEQ</code></a></p></li></ul>',4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[2]||(i[2]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/61b8f5f04f22b577306a2c61df8f55094c93d0d2/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L82-L94",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",c,[s("summary",null,[i[4]||(i[4]=s("a",{id:"PortfolioOptimisers.LEQ",href:"#PortfolioOptimisers.LEQ"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.LEQ")],-1)),i[5]||(i[5]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[7]||(i[7]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LEQ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> InequalityComparisonOperator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Less-than-or-equal-to comparison operator for constraint generation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.InequalityComparisonOperator"><code>InequalityComparisonOperator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EQ"><code>EQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.GEQ"><code>GEQ</code></a></p></li></ul>',4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[6]||(i[6]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/61b8f5f04f22b577306a2c61df8f55094c93d0d2/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L97-L109",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",f,[s("summary",null,[i[8]||(i[8]=s("a",{id:"PortfolioOptimisers.GEQ",href:"#PortfolioOptimisers.GEQ"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.GEQ")],-1)),i[9]||(i[9]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[11]||(i[11]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GEQ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> InequalityComparisonOperator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Greater-than-or-equal-to comparison operator for constraint generation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.InequalityComparisonOperator"><code>InequalityComparisonOperator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EQ"><code>EQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.LEQ"><code>LEQ</code></a></p></li></ul>',4)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[10]||(i[10]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/61b8f5f04f22b577306a2c61df8f55094c93d0d2/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L112-L124",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",g,[s("summary",null,[i[12]||(i[12]=s("a",{id:"PortfolioOptimisers.AbstractConstraintResult",href:"#PortfolioOptimisers.AbstractConstraintResult"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractConstraintResult")],-1)),i[13]||(i[13]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[15]||(i[15]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractConstraintResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractResult</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all constraint result types in PortfolioOptimisers.jl.</p><p>All concrete types representing the result of constraint generation or evaluation should subtype <code>AbstractConstraintResult</code>. This enables a consistent interface for handling constraint results across different estimators and algorithms.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.AbstractConstraintEstimator"><code>AbstractConstraintEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/01_Base#PortfolioOptimisers.AbstractResult"><code>AbstractResult</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[14]||(i[14]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/61b8f5f04f22b577306a2c61df8f55094c93d0d2/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L1-L14",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",u,[s("summary",null,[i[16]||(i[16]=s("a",{id:"PortfolioOptimisers.AbstractConstraintEstimator",href:"#PortfolioOptimisers.AbstractConstraintEstimator"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractConstraintEstimator")],-1)),i[17]||(i[17]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[19]||(i[19]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractConstraintEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all constraint estimator types in PortfolioOptimisers.jl.</p><p>All concrete types implementing constraint generation or estimation algorithms should subtype <code>AbstractConstraintEstimator</code>. This enables extensible and composable workflows for constraint construction and validation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.AbstractConstraintResult"><code>AbstractConstraintResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/01_Base#PortfolioOptimisers.AbstractEstimator"><code>AbstractEstimator</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[18]||(i[18]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/61b8f5f04f22b577306a2c61df8f55094c93d0d2/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L17-L30",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",m,[s("summary",null,[i[20]||(i[20]=s("a",{id:"PortfolioOptimisers.ComparisonOperator",href:"#PortfolioOptimisers.ComparisonOperator"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.ComparisonOperator")],-1)),i[21]||(i[21]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[23]||(i[23]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ComparisonOperator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Abstract supertype for all comparison operator types used in constraint generation.</p><p>Concrete subtypes represent specific comparison semantics (e.g., equality, inequality) for use in constraint definitions and evaluation.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EqualityComparisonOperator"><code>EqualityComparisonOperator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.InequalityComparisonOperator"><code>InequalityComparisonOperator</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[22]||(i[22]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/61b8f5f04f22b577306a2c61df8f55094c93d0d2/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L33-L46",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",_,[s("summary",null,[i[24]||(i[24]=s("a",{id:"PortfolioOptimisers.EqualityComparisonOperator",href:"#PortfolioOptimisers.EqualityComparisonOperator"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.EqualityComparisonOperator")],-1)),i[25]||(i[25]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[27]||(i[27]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EqualityComparisonOperator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ComparisonOperator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all equality comparison operator types.</p><p>Concrete subtypes represent equality-based comparison semantics (e.g., <code>EQ</code>) for use in constraint definitions.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperator"><code>ComparisonOperator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EQ"><code>EQ</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[26]||(i[26]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/61b8f5f04f22b577306a2c61df8f55094c93d0d2/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L49-L62",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",C,[s("summary",null,[i[28]||(i[28]=s("a",{id:"PortfolioOptimisers.InequalityComparisonOperator",href:"#PortfolioOptimisers.InequalityComparisonOperator"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.InequalityComparisonOperator")],-1)),i[29]||(i[29]=e()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),i[31]||(i[31]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> InequalityComparisonOperator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ComparisonOperator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all inequality comparison operator types.</p><p>Concrete subtypes represent inequality-based comparison semantics (e.g., <code>LEQ</code>, <code>GEQ</code>) for use in constraint definitions.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperator"><code>ComparisonOperator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.LEQ"><code>LEQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.GEQ"><code>GEQ</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[30]||(i[30]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/61b8f5f04f22b577306a2c61df8f55094c93d0d2/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L65-L79",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),s("details",y,[s("summary",null,[i[32]||(i[32]=s("a",{id:"PortfolioOptimisers.comparison_sign_ineq_flag",href:"#PortfolioOptimisers.comparison_sign_ineq_flag"},[s("span",{class:"jlbinding"},"PortfolioOptimisers.comparison_sign_ineq_flag")],-1)),i[33]||(i[33]=e()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),i[35]||(i[35]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparison_sign_ineq_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(op</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ComparisonOperator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return the multiplicative sign and inequality flag for a given comparison operator.</p><p><strong>Arguments</strong></p><ul><li><code>op::ComparisonOperator</code>: The comparison operator.</li></ul><p><strong>Returns</strong></p><ul><li><p><code>sign::Int</code>: The multiplicative sign for the constraint.</p></li><li><p><code>is_inequality::Bool</code>: <code>true</code> if the operator is an inequality, <code>false</code> for equality.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparison_sign_ineq_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">EQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparison_sign_ineq_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">LEQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PortfolioOptimisers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">comparison_sign_ineq_flag</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GEQ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.EQ"><code>EQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.LEQ"><code>LEQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.GEQ"><code>GEQ</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR17/api/12_ConstraintGeneration/1_Base_ConstraintGeneration#PortfolioOptimisers.ComparisonOperator"><code>ComparisonOperator</code></a></p></li></ul>`,10)),a(t,{type:"info",class:"source-link",text:"source"},{default:n(()=>[...i[34]||(i[34]=[s("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/61b8f5f04f22b577306a2c61df8f55094c93d0d2/src/12_ConstraintGeneration/1_Base_ConstraintGeneration.jl#L127-L162",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const v=r(h,[["render",E]]);export{T as __pageData,v as default};
