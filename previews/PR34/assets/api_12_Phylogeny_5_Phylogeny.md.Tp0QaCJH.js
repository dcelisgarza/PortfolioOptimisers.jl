import{_ as r,C as p,c as o,o as h,j as i,a as n,aA as e,G as a,w as l}from"./chunks/framework.Cs8f60z-.js";const X=JSON.parse('{"title":"Phylogeny","description":"","frontmatter":{},"headers":[],"relativePath":"api/12_Phylogeny/5_Phylogeny.md","filePath":"api/12_Phylogeny/5_Phylogeny.md","lastUpdated":null}'),k={name:"api/12_Phylogeny/5_Phylogeny.md"},g={class:"jldocstring custom-block",open:""},d={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},P={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},w={class:"jldocstring custom-block",open:""},B={class:"jldocstring custom-block",open:""},O={class:"jldocstring custom-block",open:""},R={class:"jldocstring custom-block",open:""},x={class:"jldocstring custom-block",open:""},S={class:"jldocstring custom-block",open:""},N={class:"jldocstring custom-block",open:""};function I(V,s,G,L,z,K){const t=p("Badge");return h(),o("div",null,[s[126]||(s[126]=i("h1",{id:"Phylogeny",tabindex:"-1"},[n("Phylogeny "),i("a",{class:"header-anchor",href:"#Phylogeny","aria-label":'Permalink to "Phylogeny {#Phylogeny}"'},"​")],-1)),i("details",g,[i("summary",null,[s[0]||(s[0]=i("a",{id:"PortfolioOptimisers.PhylogenyResult",href:"#PortfolioOptimisers.PhylogenyResult"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.PhylogenyResult")],-1)),s[1]||(s[1]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PhylogenyResult{T} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Container type for phylogeny matrix or vector results in PortfolioOptimisers.jl.</p><p><code>PhylogenyResult</code> stores the output of phylogeny-based estimation routines, such as network or clustering-based phylogeny matrices, or centrality vectors. It is used throughout the package to represent validated phylogeny structures for constraint generation, centrality analysis, and related workflows.</p><p><strong>Fields</strong></p><ul><li><code>X</code>: The phylogeny matrix or centrality vector.</li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhylogenyResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:AbstractMatrix, &lt;:AbstractVector}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Validation</strong></p><ul><li><p><code>!isempty(X)</code>.</p></li><li><p>If <code>X</code> is a <code>AbstractMatrix</code>:</p><ul><li><p>Must be symmetric, <code>issymmetric(X) == true</code>.</p></li><li><p>Must have zero diagonal, <code>all(iszero, diag(X)) == true</code>.</p></li></ul></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PhylogenyResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhylogenyResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  X ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Int64}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PhylogenyResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhylogenyResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  X ┴ Vector{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/1_Base_Phylogeny#PortfolioOptimisers.AbstractPhylogenyResult"><code>AbstractPhylogenyResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.phylogeny_matrix"><code>phylogeny_matrix</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li></ul>`,14)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[2]||(s[2]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L1-L46",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",d,[i("summary",null,[s[4]||(s[4]=i("a",{id:"PortfolioOptimisers.BetweennessCentrality",href:"#PortfolioOptimisers.BetweennessCentrality"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.BetweennessCentrality")],-1)),s[5]||(s[5]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BetweennessCentrality{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCentralityAlgorithm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Centrality algorithm type for betweenness centrality in PortfolioOptimisers.jl.</p><p><code>BetweennessCentrality</code> computes the <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.betweenness_centrality" target="_blank" rel="noreferrer">betweenness centrality</a> of nodes in a graph, measuring the extent to which a node lies on shortest paths between other nodes.</p><p><strong>Fields</strong></p><ul><li><p><code>args</code>: Positional arguments for the centrality computation.</p></li><li><p><code>kwargs</code>: Keyword arguments for the centrality computation.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BetweennessCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (), kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;))</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BetweennessCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BetweennessCentrality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.betweenness_centrality" target="_blank" rel="noreferrer"><code>Graphs.betweenness_centrality</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[6]||(s[6]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L156-L190",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",y,[i("summary",null,[s[8]||(s[8]=i("a",{id:"PortfolioOptimisers.ClosenessCentrality",href:"#PortfolioOptimisers.ClosenessCentrality"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.ClosenessCentrality")],-1)),s[9]||(s[9]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ClosenessCentrality{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCentralityAlgorithm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Centrality algorithm type for closeness centrality in PortfolioOptimisers.jl.</p><p><code>ClosenessCentrality</code> computes the <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.closeness_centrality" target="_blank" rel="noreferrer">closeness centrality</a> of nodes in a graph, measuring how close a node is to all other nodes.</p><p><strong>Fields</strong></p><ul><li><p><code>args</code>: Positional arguments for the centrality computation.</p></li><li><p><code>kwargs</code>: Keyword arguments for the centrality computation.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ClosenessCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (), kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;))</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ClosenessCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ClosenessCentrality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.closeness_centrality" target="_blank" rel="noreferrer"><code>Graphs.closeness_centrality</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[10]||(s[10]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L201-L235",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",c,[i("summary",null,[s[12]||(s[12]=i("a",{id:"PortfolioOptimisers.DegreeCentrality",href:"#PortfolioOptimisers.DegreeCentrality"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.DegreeCentrality")],-1)),s[13]||(s[13]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[15]||(s[15]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DegreeCentrality{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCentralityAlgorithm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Centrality algorithm type for degree centrality in PortfolioOptimisers.jl.</p><p><code>DegreeCentrality</code> computes the <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.degree_centrality-Tuple%7BAbstractGraph%7D" target="_blank" rel="noreferrer">degree centrality</a> of nodes in a graph, measuring the number of edges connected to each node. The <code>kind</code> parameter specifies the type of degree (0: total, 1: in-degree, 2: out-degree).</p><p><strong>Fields</strong></p><ul><li><p><code>kind</code>: Degree type (0: total, 1: in-degree, 2: out-degree).</p></li><li><p><code>kwargs</code>: Keyword arguments for the centrality computation.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DegreeCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; kind</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;))</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Validation</strong></p><ul><li><code>0 &lt;= kind &lt;= 2</code>.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DegreeCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; kind </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DegreeCentrality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kind ┼ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.degree_centrality-Tuple%7BAbstractGraph%7D" target="_blank" rel="noreferrer"><code>Graphs._degree_centrality</code></a></p></li></ul>`,14)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[14]||(s[14]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L246-L284",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",E,[i("summary",null,[s[16]||(s[16]=i("a",{id:"PortfolioOptimisers.EigenvectorCentrality",href:"#PortfolioOptimisers.EigenvectorCentrality"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.EigenvectorCentrality")],-1)),s[17]||(s[17]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[19]||(s[19]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EigenvectorCentrality </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCentralityAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Centrality algorithm type for <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.eigenvector_centrality-Tuple%7BAbstractGraph%7D" target="_blank" rel="noreferrer">eigenvector centrality</a> in PortfolioOptimisers.jl.</p><p><code>EigenvectorCentrality</code> computes the eigenvector centrality of nodes in a graph, measuring the influence of a node based on the centrality of its neighbors.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.eigenvector_centrality-Tuple%7BAbstractGraph%7D" target="_blank" rel="noreferrer"><code>Graphs.eigenvector_centrality</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[18]||(s[18]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L296-L307",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",u,[i("summary",null,[s[20]||(s[20]=i("a",{id:"PortfolioOptimisers.KatzCentrality",href:"#PortfolioOptimisers.KatzCentrality"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.KatzCentrality")],-1)),s[21]||(s[21]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KatzCentrality{T1} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCentralityAlgorithm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alpha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Centrality algorithm type for Katz centrality in PortfolioOptimisers.jl.</p><p><code>KatzCentrality</code> computes the <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.katz_centrality" target="_blank" rel="noreferrer">Katz centrality</a> of nodes in a graph, measuring the influence of a node based on the number and length of walks between nodes, controlled by the attenuation factor <code>alpha</code>.</p><p><strong>Fields</strong></p><ul><li><code>alpha</code>: Attenuation factor for Katz centrality.</li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KatzCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; alpha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> KatzCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; alpha </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KatzCentrality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  alpha ┴ Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.katz_centrality" target="_blank" rel="noreferrer"><code>Graphs.katz_centrality</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[22]||(s[22]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L309-L340",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",m,[i("summary",null,[s[24]||(s[24]=i("a",{id:"PortfolioOptimisers.Pagerank",href:"#PortfolioOptimisers.Pagerank"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.Pagerank")],-1)),s[25]||(s[25]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[27]||(s[27]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Pagerank{T1, T2, T3} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCentralityAlgorithm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alpha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    epsilon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T3</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Centrality algorithm type for PageRank in PortfolioOptimisers.jl.</p><p><code>Pagerank</code> computes the <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.pagerank-Union%7BTuple%7BAbstractGraph%7BU%7D%7D,%20Tuple%7BU%7D,%20Tuple%7BAbstractGraph%7BU%7D,%20Any%7D,%20Tuple%7BAbstractGraph%7BU%7D,%20Any,%20Integer%7D,%20Tuple%7BAbstractGraph%7BU%7D,%20Any,%20Integer,%20Any%7D%7D%20where%20U%3C:Integer" target="_blank" rel="noreferrer">PageRank</a> of nodes in a graph, measuring the importance of nodes based on the structure of incoming links. The algorithm is controlled by the damping factor <code>alpha</code>, number of iterations <code>n</code>, and convergence tolerance <code>epsilon</code>.</p><p><strong>Fields</strong></p><ul><li><p><code>n</code>: Number of iterations (must be &gt; 0).</p></li><li><p><code>alpha</code>: Damping factor (must be in (0, 1)).</p></li><li><p><code>epsilon</code>: Convergence tolerance (must be &gt; 0).</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pagerank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; alpha</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.85</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, epsilon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Real</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Validation</strong></p><ul><li><p><code>n &gt; 0</code>.</p></li><li><p><code>0 &lt; alpha &lt; 1</code>.</p></li><li><p><code>epsilon &gt; 0</code>.</p></li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Pagerank</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; alpha </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, epsilon </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1e-8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Pagerank</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        n ┼ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alpha ┼ Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.9</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  epsilon ┴ Float64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0e-8</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.pagerank-Union%7BTuple%7BAbstractGraph%7BU%7D%7D,%20Tuple%7BU%7D,%20Tuple%7BAbstractGraph%7BU%7D,%20Any%7D,%20Tuple%7BAbstractGraph%7BU%7D,%20Any,%20Integer%7D,%20Tuple%7BAbstractGraph%7BU%7D,%20Any,%20Integer,%20Any%7D%7D%20where%20U%3C:Integer" target="_blank" rel="noreferrer"><code>Graphs.pagerank</code></a></p></li></ul>`,14)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[26]||(s[26]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L350-L393",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",C,[i("summary",null,[s[28]||(s[28]=i("a",{id:"PortfolioOptimisers.RadialityCentrality",href:"#PortfolioOptimisers.RadialityCentrality"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.RadialityCentrality")],-1)),s[29]||(s[29]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[31]||(s[31]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> RadialityCentrality </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCentralityAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Centrality algorithm type for <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.radiality_centrality-Tuple%7BAbstractGraph%7D" target="_blank" rel="noreferrer">radiality centrality</a> in PortfolioOptimisers.jl.</p><p><code>RadialityCentrality</code> computes the radiality centrality of nodes in a graph, measuring how close a node is to all other nodes, adjusted for the maximum possible distance.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.radiality_centrality-Tuple%7BAbstractGraph%7D" target="_blank" rel="noreferrer"><code>Graphs.radiality_centrality</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[30]||(s[30]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L407-L418",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",f,[i("summary",null,[s[32]||(s[32]=i("a",{id:"PortfolioOptimisers.StressCentrality",href:"#PortfolioOptimisers.StressCentrality"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.StressCentrality")],-1)),s[33]||(s[33]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[35]||(s[35]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StressCentrality{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCentralityAlgorithm</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Centrality algorithm type for <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.stress_centrality" target="_blank" rel="noreferrer">stress centrality</a> in PortfolioOptimisers.jl.</p><p><code>StressCentrality</code> computes the stress centrality of nodes in a graph, measuring the number of shortest paths passing through each node.</p><p><strong>Fields</strong></p><ul><li><p><code>args</code>: Positional arguments for the centrality computation.</p></li><li><p><code>kwargs</code>: Keyword arguments for the centrality computation.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StressCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (), kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;))</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StressCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">StressCentrality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/#Graphs.stress_centrality" target="_blank" rel="noreferrer"><code>Graphs.stress_centrality</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[34]||(s[34]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L420-L454",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",b,[i("summary",null,[s[36]||(s[36]=i("a",{id:"PortfolioOptimisers.KruskalTree",href:"#PortfolioOptimisers.KruskalTree"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.KruskalTree")],-1)),s[37]||(s[37]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[39]||(s[39]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> KruskalTree{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractTreeType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Algorithm type for Kruskal&#39;s minimum spanning tree (MST) in PortfolioOptimisers.jl.</p><p><code>KruskalTree</code> specifies the use of <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/spanningtrees/#Graphs.kruskal_mst" target="_blank" rel="noreferrer">Kruskal&#39;s algorithm</a> for constructing a minimum spanning tree from a graph.</p><p><strong>Fields</strong></p><ul><li><p><code>args</code>: Positional arguments for the MST computation.</p></li><li><p><code>kwargs</code>: Keyword arguments for the MST computation.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">KruskalTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (), kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;))</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> KruskalTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KruskalTree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractTreeType"><code>AbstractTreeType</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/spanningtrees/#Graphs.kruskal_mst" target="_blank" rel="noreferrer"><code>Graphs.kruskal_mst</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[38]||(s[38]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L541-L575",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",F,[i("summary",null,[s[40]||(s[40]=i("a",{id:"PortfolioOptimisers.BoruvkaTree",href:"#PortfolioOptimisers.BoruvkaTree"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.BoruvkaTree")],-1)),s[41]||(s[41]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[43]||(s[43]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> BoruvkaTree{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractTreeType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Algorithm type for Boruvka&#39;s minimum spanning tree (MST) in PortfolioOptimisers.jl.</p><p><code>BoruvkaTree</code> specifies the use of <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/spanningtrees/#Graphs.boruvka_mst" target="_blank" rel="noreferrer">Boruvka&#39;s algorithm</a> for constructing a minimum spanning tree from a graph.</p><p><strong>Fields</strong></p><ul><li><p><code>args</code>: Positional arguments for the MST computation.</p></li><li><p><code>kwargs</code>: Keyword arguments for the MST computation.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BoruvkaTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (), kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;))</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> BoruvkaTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BoruvkaTree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractTreeType"><code>AbstractTreeType</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/spanningtrees/#Graphs.boruvka_mst" target="_blank" rel="noreferrer"><code>Graphs.boruvka_mst</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[42]||(s[42]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L586-L620",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",P,[i("summary",null,[s[44]||(s[44]=i("a",{id:"PortfolioOptimisers.PrimTree",href:"#PortfolioOptimisers.PrimTree"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.PrimTree")],-1)),s[45]||(s[45]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[47]||(s[47]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PrimTree{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractTreeType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Algorithm type for Prim&#39;s minimum spanning tree (MST) in PortfolioOptimisers.jl.</p><p><code>PrimTree</code> specifies the use of <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/spanningtrees/#Graphs.prim_mst" target="_blank" rel="noreferrer">Prim&#39;s algorithm</a> for constructing a minimum spanning tree from a graph.</p><p><strong>Fields</strong></p><ul><li><p><code>args</code>: Positional arguments for the MST computation.</p></li><li><p><code>kwargs</code>: Keyword arguments for the MST computation.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PrimTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (), kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NamedTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (;))</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PrimTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PrimTree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractTreeType"><code>AbstractTreeType</code></a></p></li><li><p><a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/spanningtrees/#Graphs.prim_mst" target="_blank" rel="noreferrer"><code>Graphs.prim_mst</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[46]||(s[46]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L631-L665",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",_,[i("summary",null,[s[48]||(s[48]=i("a",{id:"PortfolioOptimisers.NetworkEstimator",href:"#PortfolioOptimisers.NetworkEstimator"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.NetworkEstimator")],-1)),s[49]||(s[49]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[51]||(s[51]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NetworkEstimator{T1, T2, T3, T4} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractNetworkEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    de</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T3</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T4</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Estimator type for network-based phylogeny analysis in PortfolioOptimisers.jl.</p><p><code>NetworkEstimator</code> encapsulates the configuration for constructing a network from asset data, including the covariance estimator, distance estimator, tree or similarity algorithm, and the network depth parameter.</p><p><strong>Fields</strong></p><ul><li><p><code>ce</code>: Covariance estimator.</p></li><li><p><code>de</code>: Distance estimator.</p></li><li><p><code>alg</code>: Tree or similarity matrix algorithm.</p></li><li><p><code>n</code>: NetworkEstimator depth parameter.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; ce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StatsBase.CovarianceEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PortfolioOptimisersCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 de</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractDistanceEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Distance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; alg </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CanonicalDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:AbstractSimilarityMatrixAlgorithm, &lt;:AbstractTreeType}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> KruskalTree</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Integer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">NetworkEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ce ┼ PortfolioOptimisersCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │   ce ┼ Covariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │    me ┼ SimpleExpectedReturns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │       │   w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │    ce ┼ GeneralCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │       │   ce ┼ StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleCovariance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimpleCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │       │    w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │   alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │   mp ┼ DefaultMatrixProcessing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │       pdm ┼ Posdef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │           │   alg ┴ UnionAll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NearestCorrelationMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Newton</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │   denoise ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │    detone ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │      │       alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   de ┼ Distance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │   power ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │     alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CanonicalDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  alg ┼ KruskalTree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │     args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      │   kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    n ┴ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractNetworkEstimator"><code>AbstractNetworkEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractTreeType"><code>AbstractTreeType</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/4_DBHT#PortfolioOptimisers.AbstractSimilarityMatrixAlgorithm"><code>AbstractSimilarityMatrixAlgorithm</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[50]||(s[50]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L725-L786",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",A,[i("summary",null,[s[52]||(s[52]=i("a",{id:"PortfolioOptimisers.CentralityEstimator",href:"#PortfolioOptimisers.CentralityEstimator"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.CentralityEstimator")],-1)),s[53]||(s[53]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[55]||(s[55]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CentralityEstimator{T1, T2} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCentralityEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T2</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><p>Estimator type for centrality-based analysis in PortfolioOptimisers.jl.</p><p><code>CentralityEstimator</code> encapsulates the configuration for computing centrality measures on a network, including the network estimator and the centrality algorithm.</p><p><strong>Fields</strong></p><ul><li><p><code>ne</code>: NetworkEstimator estimator.</p></li><li><p><code>cent</code>: Centrality algorithm.</p></li></ul><p><strong>Constructor</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    ne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:AbstractPhylogenyEstimator, &lt;:AbstractPhylogenyResult}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                    cent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCentralityAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DegreeCentrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p>Keyword arguments correspond to the fields above.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CentralityEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CentralityEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ne ┼ NetworkEstimator</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │    ce ┼ PortfolioOptimisersCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │   ce ┼ Covariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │    me ┼ SimpleExpectedReturns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │       │   w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │    ce ┼ GeneralCovariance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │       │   ce ┼ StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">SimpleCovariance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> StatsBase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimpleCovariance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │       │    w ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │   alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Full</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │   mp ┼ DefaultMatrixProcessing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │       pdm ┼ Posdef</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │           │   alg ┴ UnionAll</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> NearestCorrelationMatrix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Newton</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │   denoise ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │    detone ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │      │       alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │    de ┼ Distance</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │   power ┼ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nothing</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │     alg ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CanonicalDistance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │   alg ┼ KruskalTree</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │     args ┼ Tuple{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │       │   kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │     n ┴ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  cent ┼ DegreeCentrality</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │     kind ┼ Int64</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">       │   kwargs ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> NamedTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityEstimator"><code>AbstractCentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li></ul>`,12)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[54]||(s[54]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L820-L879",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",v,[i("summary",null,[s[56]||(s[56]=i("a",{id:"PortfolioOptimisers.phylogeny_matrix",href:"#PortfolioOptimisers.phylogeny_matrix"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.phylogeny_matrix")],-1)),s[57]||(s[57]=n()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[62]||(s[62]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">phylogeny_matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhylogenyResult{&lt;:AbstractMatrix}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Fallback no-op for returning a validated phylogeny matrix result as-is.</p><p>This method provides a generic interface for handling precomputed phylogeny matrices wrapped in a <a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PhylogenyResult"><code>PhylogenyResult</code></a>. It simply returns the input object unchanged, enabling consistent downstream workflows for constraint generation and analysis.</p><p><strong>Arguments</strong></p><ul><li><p><code>ph::PhylogenyResult{&lt;:AbstractMatrix}</code>: Phylogeny matrix result object.</p></li><li><p><code>args...</code>: Additional positional arguments (ignored).</p></li><li><p><code>kwargs...</code>: Additional keyword arguments (ignored).</p></li></ul><p><strong>Returns</strong></p><ul><li>The input <code>ph</code> object.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ph </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PhylogenyResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> phylogeny_matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ph)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhylogenyResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  X ┴ </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Matrix{Int64}</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PhylogenyResult"><code>PhylogenyResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.phylogeny_matrix"><code>phylogeny_matrix</code></a></p></li></ul>`,11)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[58]||(s[58]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L61-L92",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[63]||(s[63]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">phylogeny_matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractNetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the phylogeny matrix for a network estimator.</p><p>This function constructs the adjacency matrix for the network, then computes the phylogeny matrix by summing powers of the adjacency matrix up to the network depth parameter <code>n</code>, clamping values to 0 or 1, and removing self-loops.</p><p><strong>Arguments</strong></p><ul><li><p><code>ne</code>: NetworkEstimator estimator.</p></li><li><p><code>X</code>: Data matrix (observations × assets).</p></li><li><p><code>dims</code>: Dimension along which to compute.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>P::Matrix{Int}</code>: Phylogeny matrix representing asset relationships.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.NetworkEstimator"><code>NetworkEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.calc_adjacency"><code>calc_adjacency</code></a></p></li></ul>',9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[59]||(s[59]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L936-L958",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[64]||(s[64]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">phylogeny_matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:AbstractClusteringEstimator, &lt;:AbstractClusteringResult}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; branchorder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :optimal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the phylogeny matrix for a clustering estimator or result.</p><p>This function clusterises the data, cuts the tree into the optimal number of clusters, and constructs a binary phylogeny matrix indicating shared cluster membership, with self-loops removed.</p><p><strong>Arguments</strong></p><ul><li><p><code>cle</code>: Clustering estimator or result.</p></li><li><p><code>X</code>: Data matrix (observations × assets).</p></li><li><p><code>branchorder</code>: Branch ordering strategy for hierarchical clustering.</p></li><li><p><code>dims</code>: Dimension along which to compute.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>P::Matrix{Int}</code>: Phylogeny matrix representing cluster relationships.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/2_Clustering#PortfolioOptimisers.ClusteringEstimator"><code>ClusteringEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/2_Clustering#PortfolioOptimisers.AbstractClusteringResult"><code>AbstractClusteringResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/2_Clustering#PortfolioOptimisers.clusterise-Tuple{PortfolioOptimisers.AbstractClusteringResult, Vararg{Any}}"><code>clusterise</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[60]||(s[60]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L969-L995",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[65]||(s[65]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">phylogeny_matrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(necle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractNetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                              &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, pr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPriorResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                 kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the phylogeny matrix from asset returns in a prior result using a network or clustering estimator.</p><p><code>phylogeny_matrix</code> applies the specified network or clustering estimator to the asset returns matrix contained in the prior result object, producing a phylogeny matrix for use in constraint generation, centrality analysis, or portfolio construction.</p><p><strong>Arguments</strong></p><ul><li><p><code>necle</code>: Network estimator, clustering estimator, or clustering result.</p></li><li><p><code>pr</code>: Prior result object.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to the estimator.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>plr::PhylogenyResult</code>: Result object containing the phylogeny matrix.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.NetworkEstimator"><code>NetworkEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/2_Clustering#PortfolioOptimisers.ClusteringEstimator"><code>ClusteringEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PhylogenyResult"><code>PhylogenyResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.phylogeny_matrix"><code>phylogeny_matrix</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[61]||(s[61]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/14_Prior/01_Base_Prior.jl#L235-L260",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",j,[i("summary",null,[s[66]||(s[66]=i("a",{id:"PortfolioOptimisers.centrality_vector",href:"#PortfolioOptimisers.centrality_vector"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.centrality_vector")],-1)),s[67]||(s[67]=n()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[73]||(s[73]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centrality_vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhylogenyResult{&lt;:AbstractVector}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Fallback no-op for returning a validated centrality vector result as-is.</p><p>This method provides a generic interface for handling precomputed centrality vectors wrapped in a <a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PhylogenyResult"><code>PhylogenyResult</code></a>. It simply returns the input object unchanged, enabling consistent downstream workflows for centrality-based analysis and constraint generation.</p><p><strong>Arguments</strong></p><ul><li><p><code>ph::PhylogenyResult{&lt;:AbstractVector}</code>: Centrality vector result object.</p></li><li><p><code>args...</code>: Additional positional arguments (ignored).</p></li><li><p><code>kwargs...</code>: Additional keyword arguments (ignored).</p></li></ul><p><strong>Returns</strong></p><ul><li>The input <code>ph</code> object.</li></ul><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ph </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PhylogenyResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(; X </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> centrality_vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ph)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PhylogenyResult</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  X ┴ Vector{Float64}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PhylogenyResult"><code>PhylogenyResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li></ul>`,11)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[68]||(s[68]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L96-L127",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[74]||(s[74]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centrality_vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractNetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                            &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, cent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCentralityAlgorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the centrality vector for a network and centrality algorithm.</p><p>This function constructs the phylogeny matrix for the network, builds a graph, and computes node centrality scores using the specified centrality algorithm.</p><p><strong>Arguments</strong></p><ul><li><p><code>ne</code>: Phylogeny estimator.</p></li><li><p><code>cent</code>: Centrality algorithm.</p></li><li><p><code>X</code>: Data matrix (observations × assets).</p></li><li><p><code>dims</code>: Dimension along which to compute.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>cv::Vector{&lt;:Real}</code>: Centrality scores for each asset.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.NetworkEstimator"><code>NetworkEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.calc_centrality"><code>calc_centrality</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[69]||(s[69]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L1008-L1034",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[75]||(s[75]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centrality_vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the centrality vector for a centrality estimator.</p><p>This function applies the centrality algorithm in the estimator to the network constructed from the data.</p><p><strong>Arguments</strong></p><ul><li><p><code>cte</code>: Centrality estimator.</p></li><li><p><code>X</code>: Data matrix (observations × assets).</p></li><li><p><code>dims</code>: Dimension along which to compute.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>cv::Vector{&lt;:Real}</code>: Centrality scores for each asset.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li></ul>',9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[70]||(s[70]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L1044-L1066",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[76]||(s[76]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centrality_vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(necte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPriorResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the centrality vector for a centrality estimator and prior result.</p><p><code>centrality_vector</code> applies the centrality algorithm in the estimator to the network constructed from the asset returns in the prior result, returning centrality scores for each asset.</p><p><strong>Arguments</strong></p><ul><li><p><code>necte</code>: Centrality estimator.</p></li><li><p><code>pr</code>: Prior result object.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>plr::PhylogenyResult</code>: Result object containing the centrality vector.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PhylogenyResult"><code>PhylogenyResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li></ul>',9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[71]||(s[71]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/14_Prior/01_Base_Prior.jl#L267-L289",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[77]||(s[77]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">centrality_vector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractNetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                            &lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractClusteringResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}, cent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCentralityAlgorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                  pr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPriorResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the centrality vector for a network or clustering estimator and centrality algorithm.</p><p><code>centrality_vector</code> constructs the phylogeny matrix from the asset returns in the prior result, builds a graph, and computes node centrality scores using the specified centrality algorithm.</p><p><strong>Arguments</strong></p><ul><li><p><code>ne</code>: Network estimator, clustering estimator, or clustering result.</p></li><li><p><code>cent</code>: Centrality algorithm.</p></li><li><p><code>pr</code>: Prior result object.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>plr::PhylogenyResult</code>: Result object containing the centrality vector.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.NetworkEstimator"><code>NetworkEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PhylogenyResult"><code>PhylogenyResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[72]||(s[72]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/14_Prior/01_Base_Prior.jl#L293-L319",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",T,[i("summary",null,[s[78]||(s[78]=i("a",{id:"PortfolioOptimisers.average_centrality",href:"#PortfolioOptimisers.average_centrality"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.average_centrality")],-1)),s[79]||(s[79]=n()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[84]||(s[84]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">average_centrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:AbstractPhylogenyEstimator, &lt;:AbstractPhylogenyResult}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   cent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCentralityAlgorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the weighted average centrality for a network and centrality algorithm.</p><p>This function computes the centrality vector and returns the weighted average using the provided weights.</p><p><strong>Arguments</strong></p><ul><li><p><code>ne</code>: NetworkEstimator estimator.</p></li><li><p><code>cent</code>: Centrality algorithm.</p></li><li><p><code>w</code>: Weights vector.</p></li><li><p><code>X</code>: Data matrix (observations × assets).</p></li><li><p><code>dims</code>: Dimension along which to compute.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>ac::Real</code>: Average centrality.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.NetworkEstimator"><code>NetworkEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[80]||(s[80]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L1071-L1098",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[85]||(s[85]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">average_centrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the weighted average centrality for a centrality estimator.</p><p>This function applies the centrality algorithm in the estimator to the network and returns the weighted average using the provided weights.</p><p><strong>Arguments</strong></p><ul><li><p><code>cte</code>: Centrality estimator.</p></li><li><p><code>w</code>: Weights vector.</p></li><li><p><code>X</code>: Data matrix (observations × assets).</p></li><li><p><code>dims</code>: Dimension along which to compute.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>ac::Real</code>: Average centrality.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.average_centrality"><code>average_centrality</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[81]||(s[81]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L1105-L1129",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[86]||(s[86]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">average_centrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:AbstractPhylogenyEstimator, &lt;:AbstractPhylogenyResult}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   cent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCentralityAlgorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   pr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPriorResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the weighted average centrality for a network or phylogeny result.</p><p><code>average_centrality</code> computes the centrality vector using the specified network or phylogeny estimator and centrality algorithm, then returns the weighted average using the provided portfolio weights.</p><p><strong>Arguments</strong></p><ul><li><p><code>ne</code>: Network estimator or phylogeny result.</p></li><li><p><code>cent</code>: Centrality algorithm.</p></li><li><p><code>w</code>: Portfolio weights vector.</p></li><li><p><code>pr</code>: Prior result object.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>ac::Real</code>: Weighted average centrality.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.NetworkEstimator"><code>NetworkEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.average_centrality"><code>average_centrality</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[82]||(s[82]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/14_Prior/01_Base_Prior.jl#L327-L354",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[87]||(s[87]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">average_centrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cte</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CentralityEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractPriorResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                   kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the weighted average centrality for a centrality estimator.</p><p><code>average_centrality</code> applies the centrality algorithm in the estimator to the network constructed from the asset returns in the prior result, then returns the weighted average using the provided portfolio weights.</p><p><strong>Arguments</strong></p><ul><li><p><code>cte</code>: Centrality estimator.</p></li><li><p><code>w</code>: Portfolio weights vector.</p></li><li><p><code>pr</code>: Prior result object.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>ac::Real</code>: Weighted average centrality.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.centrality_vector"><code>centrality_vector</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.average_centrality"><code>average_centrality</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[83]||(s[83]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/14_Prior/01_Base_Prior.jl#L361-L385",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",D,[i("summary",null,[s[88]||(s[88]=i("a",{id:"PortfolioOptimisers.asset_phylogeny",href:"#PortfolioOptimisers.asset_phylogeny"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.asset_phylogeny")],-1)),s[89]||(s[89]=n()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[94]||(s[94]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">asset_phylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the asset phylogeny score for a set of weights and a phylogeny matrix.</p><p>This function computes the weighted sum of the phylogeny matrix, normalised by the sum of absolute weights. The asset phylogeny score quantifies the degree of phylogenetic (network or cluster-based) structure present in the portfolio allocation.</p><p><strong>Arguments</strong></p><ul><li><p><code>w</code>: Weights vector.</p></li><li><p><code>X</code>: Phylogeny matrix.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>p::Real</code>: Asset phylogeny score.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.phylogeny_matrix"><code>phylogeny_matrix</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.asset_phylogeny"><code>asset_phylogeny</code></a></p></li></ul>',9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[90]||(s[90]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L1134-L1154",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[95]||(s[95]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">asset_phylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, ph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhylogenyResult{&lt;:AbstractMatrix}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Calls <code>asset_phylogeny</code> with the phylogeny matrix <code>X</code> from a <code>PhylogenyResult</code>.</p>',2)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[91]||(s[91]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L1161-L1165",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[96]||(s[96]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">asset_phylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Union{&lt;:NetworkEstimator, &lt;:ClusteringEstimator}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the asset phylogeny score for a set of weights and a network or clustering estimator.</p><p>This function computes the phylogeny matrix using the estimator and data, then computes the asset phylogeny score using the weights.</p><p><strong>Arguments</strong></p><ul><li><p><code>cle</code>: NetworkEstimator or clustering estimator.</p></li><li><p><code>w</code>: Weights vector.</p></li><li><p><code>X</code>: Data matrix (observations × assets).</p></li><li><p><code>dims</code>: Dimension along which to compute.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>p::Real</code>: Asset phylogeny score.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.phylogeny_matrix"><code>phylogeny_matrix</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.asset_phylogeny"><code>asset_phylogeny</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[92]||(s[92]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L1169-L1193",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1}),s[97]||(s[97]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">asset_phylogeny</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ph</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PhylogenyResult{&lt;:AbstractMatrix}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the asset phylogeny score for a set of portfolio weights and a phylogeny matrix result, forwarding additional arguments.</p><p>This method provides compatibility with workflows that pass extra positional or keyword arguments. It extracts the phylogeny matrix from the <code>PhylogenyResult</code> and delegates to <code>asset_phylogeny(w, ph)</code>, ignoring any additional arguments.</p><p><strong>Arguments</strong></p><ul><li><p><code>ph::PhylogenyResult{&lt;:AbstractMatrix}</code>: Phylogeny matrix result object.</p></li><li><p><code>w::AbstractVector</code>: Portfolio weights vector.</p></li><li><p><code>args...</code>: Additional positional arguments (ignored).</p></li><li><p><code>kwargs...</code>: Additional keyword arguments (ignored).</p></li></ul><p><strong>Returns</strong></p><ul><li><code>score::Real</code>: Asset phylogeny score.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PhylogenyResult"><code>PhylogenyResult</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.asset_phylogeny"><code>asset_phylogeny</code></a></p></li></ul>`,9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[93]||(s[93]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L1199-L1222",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",w,[i("summary",null,[s[98]||(s[98]=i("a",{id:"PortfolioOptimisers.AbstractCentralityAlgorithm",href:"#PortfolioOptimisers.AbstractCentralityAlgorithm"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractCentralityAlgorithm")],-1)),s[99]||(s[99]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[101]||(s[101]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractCentralityAlgorithm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all centrality algorithm types in PortfolioOptimisers.jl from <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/" target="_blank" rel="noreferrer"><code>Graphs.jl</code></a>.</p><p>All concrete types implementing specific centrality algorithms (e.g., betweenness, closeness, degree, eigenvector, Katz, pagerank, radiality, stress) should subtype <code>AbstractCentralityAlgorithm</code>. This enables flexible extension and dispatch of centrality routines for network and phylogeny analysis.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.BetweennessCentrality"><code>BetweennessCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.ClosenessCentrality"><code>ClosenessCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.DegreeCentrality"><code>DegreeCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.EigenvectorCentrality"><code>EigenvectorCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.KatzCentrality"><code>KatzCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.Pagerank"><code>Pagerank</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.RadialityCentrality"><code>RadialityCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.StressCentrality"><code>StressCentrality</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[100]||(s[100]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L131-L148",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",B,[i("summary",null,[s[102]||(s[102]=i("a",{id:"PortfolioOptimisers.AbstractTreeType",href:"#PortfolioOptimisers.AbstractTreeType"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractTreeType")],-1)),s[103]||(s[103]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[105]||(s[105]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractTreeType </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all minimum spanning tree (MST) algorithm types in PortfolioOptimisers.jl.</p><p>All concrete types implementing specific MST algorithms (e.g., Kruskal, Boruvka, Prim) should subtype <code>AbstractTreeType</code>. This enables flexible extension and dispatch of tree-based routines for network and phylogeny analysis.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.KruskalTree"><code>KruskalTree</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.BoruvkaTree"><code>BoruvkaTree</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PrimTree"><code>PrimTree</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[104]||(s[104]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L527-L539",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",O,[i("summary",null,[s[106]||(s[106]=i("a",{id:"PortfolioOptimisers.calc_mst",href:"#PortfolioOptimisers.calc_mst"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.calc_mst")],-1)),s[107]||(s[107]=n()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[109]||(s[109]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_mst</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(alg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractTreeType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the minimum spanning tree (MST) of a graph using the specified algorithm.</p><p>This function dispatches to the appropriate MST computation from <code>Graphs.jl</code> based on the type of <code>alg</code>. Supported algorithms include Kruskal, Boruvka, and Prim.</p><p><strong>Arguments</strong></p><ul><li><p><code>alg</code>: MST algorithm to use.</p><ul><li><p><code>alg::KruskalTree</code>: Computes the MST using Kruskal&#39;s algorithm.</p></li><li><p><code>alg::BoruvkaTree</code>: Computes the MST using Boruvka&#39;s algorithm.</p></li><li><p><code>alg::PrimTree</code>: Computes the MST using Prim&#39;s algorithm.</p></li></ul></li><li><p><code>g::AbstractGraph</code>: Graph to compute the MST on.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>tree::Vector</code>: Vector of edges representing the MST.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.KruskalTree"><code>KruskalTree</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.BoruvkaTree"><code>BoruvkaTree</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.PrimTree"><code>PrimTree</code></a></p></li></ul>',9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[108]||(s[108]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L676-L702",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",R,[i("summary",null,[s[110]||(s[110]=i("a",{id:"PortfolioOptimisers.AbstractNetworkEstimator",href:"#PortfolioOptimisers.AbstractNetworkEstimator"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractNetworkEstimator")],-1)),s[111]||(s[111]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[113]||(s[113]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractNetworkEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all network estimator types in PortfolioOptimisers.jl.</p><p>All concrete types implementing network-based estimation algorithms should subtype <code>AbstractNetworkEstimator</code>. This enables a consistent interface for network estimators throughout the package.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.NetworkEstimator"><code>NetworkEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityEstimator"><code>AbstractCentralityEstimator</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[112]||(s[112]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L712-L723",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",x,[i("summary",null,[s[114]||(s[114]=i("a",{id:"PortfolioOptimisers.AbstractCentralityEstimator",href:"#PortfolioOptimisers.AbstractCentralityEstimator"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractCentralityEstimator")],-1)),s[115]||(s[115]=n()),a(t,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[117]||(s[117]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractCentralityEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractPhylogenyEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all centrality estimator types in PortfolioOptimisers.jl.</p><p>All concrete types implementing centrality-based estimation algorithms should subtype <code>AbstractCentralityEstimator</code>. This enables a consistent interface for centrality estimators throughout the package.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.CentralityEstimator"><code>CentralityEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li></ul>',5)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[116]||(s[116]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L807-L818",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",S,[i("summary",null,[s[118]||(s[118]=i("a",{id:"PortfolioOptimisers.calc_adjacency",href:"#PortfolioOptimisers.calc_adjacency"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.calc_adjacency")],-1)),s[119]||(s[119]=n()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[121]||(s[121]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_adjacency</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ne</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">NetworkEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the adjacency matrix for a network estimator.</p><p><strong>Arguments</strong></p><ul><li><p><code>ne</code>: NetworkEstimator estimator.</p><ul><li><p><code>ne::NetworkEstimator{&lt;:Any, &lt;:Any, &lt;:AbstractTreeType, &lt;:Any}</code>: Constructs a weighted graph from the distance matrix and computes the minimum spanning tree, returning the adjacency matrix of the resulting graph.</p></li><li><p><code>ne::NetworkEstimator{&lt;:Any, &lt;:Any, &lt;:AbstractSimilarityMatrixAlgorithm, &lt;:Any}</code>: Computes the similarity and distance matrices, applies the <a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/4_DBHT#PortfolioOptimisers.PMFG_T2s"><code>PMFG_T2s</code></a> algorithm, and returns the adjacency matrix of the resulting graph..</p></li></ul></li><li><p><code>X</code>: Data matrix (observations × assets).</p></li><li><p><code>dims</code>: Dimension along which to compute.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>adj::Matrix{Int}</code>: Adjacency matrix representing the network.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.NetworkEstimator"><code>NetworkEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.calc_mst"><code>calc_mst</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/4_DBHT#PortfolioOptimisers.PMFG_T2s"><code>PMFG_T2s</code></a></p></li></ul>',8)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[120]||(s[120]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L895-L920",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),i("details",N,[i("summary",null,[s[122]||(s[122]=i("a",{id:"PortfolioOptimisers.calc_centrality",href:"#PortfolioOptimisers.calc_centrality"},[i("span",{class:"jlbinding"},"PortfolioOptimisers.calc_centrality")],-1)),s[123]||(s[123]=n()),a(t,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[125]||(s[125]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">calc_centrality</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(cent</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractCentralityAlgorithm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractGraph</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute node centrality scores for a graph using the specified centrality algorithm.</p><p>This function dispatches to the appropriate centrality computation from <a href="https://juliagraphs.org/Graphs.jl/stable/algorithms/centrality/" target="_blank" rel="noreferrer"><code>Graphs.jl</code></a> based on the type of <code>cent</code>. Supported algorithms include betweenness, closeness, degree, eigenvector, Katz, pagerank, radiality, and stress centrality.</p><p><strong>Arguments</strong></p><ul><li><p><code>cent</code>: Centrality algorithm to use.</p><ul><li><p><code>cent::BetweennessCentrality</code>: Computes betweenness centrality.</p></li><li><p><code>cent::ClosenessCentrality</code>: Computes closeness centrality.</p></li><li><p><code>cent::DegreeCentrality</code>: Computes degree centrality.</p></li><li><p><code>cent::EigenvectorCentrality</code>: Computes eigenvector centrality.</p></li><li><p><code>cent::KatzCentrality</code>: Computes Katz centrality.</p></li><li><p><code>cent::Pagerank</code>: Computes PageRank.</p></li><li><p><code>cent::RadialityCentrality</code>: Computes radiality centrality.</p></li><li><p><code>cent::StressCentrality</code>: Computes stress centrality.</p></li></ul></li><li><p><code>g</code>: Graph to compute centrality on.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>Vector{&lt;:Real}</code>: Centrality scores for each node in the graph.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.AbstractCentralityAlgorithm"><code>AbstractCentralityAlgorithm</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.BetweennessCentrality"><code>BetweennessCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.ClosenessCentrality"><code>ClosenessCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.DegreeCentrality"><code>DegreeCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.EigenvectorCentrality"><code>EigenvectorCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.KatzCentrality"><code>KatzCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.Pagerank"><code>Pagerank</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.RadialityCentrality"><code>RadialityCentrality</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR34/api/12_Phylogeny/5_Phylogeny#PortfolioOptimisers.StressCentrality"><code>StressCentrality</code></a></p></li></ul>',9)),a(t,{type:"info",class:"source-link",text:"source"},{default:l(()=>[...s[124]||(s[124]=[i("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/a44027a60547cb49f606b15f2ead43a7a0739697/src/12_Phylogeny/05_Phylogeny.jl#L465-L502",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const U=r(k,[["render",I]]);export{X as __pageData,U as default};
