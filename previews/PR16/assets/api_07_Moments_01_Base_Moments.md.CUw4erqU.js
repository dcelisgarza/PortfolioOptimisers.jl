import{_ as l,C as n,c as p,o as d,j as t,a,aA as o,G as e,w as r}from"./chunks/framework.dDzCSlLk.js";const T=JSON.parse('{"title":"Base Moments","description":"","frontmatter":{},"headers":[],"relativePath":"api/07_Moments/01_Base_Moments.md","filePath":"api/07_Moments/01_Base_Moments.md","lastUpdated":null}'),c={name:"api/07_Moments/01_Base_Moments.md"},h={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""};function A(E,s,v,j,P,C){const i=n("Badge");return d(),p("div",null,[s[36]||(s[36]=t("h1",{id:"Base-Moments",tabindex:"-1"},[a("Base Moments "),t("a",{class:"header-anchor",href:"#Base-Moments","aria-label":'Permalink to "Base Moments {#Base-Moments}"'},"â€‹")],-1)),t("details",h,[t("summary",null,[s[0]||(s[0]=t("a",{id:"PortfolioOptimisers.Full",href:"#PortfolioOptimisers.Full"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.Full")],-1)),s[1]||(s[1]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[3]||(s[3]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Full </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractMomentAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p><code>Full</code> is used to indicate that all available data points are included in the moment estimation process.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.AbstractMomentAlgorithm"><code>AbstractMomentAlgorithm</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.Semi"><code>Semi</code></a></p></li></ul>',4)),e(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[2]||(s[2]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/30a4ce86fea848117ad063b2a2ff39f2b18f72e6/src/7_Moments/1_Base_Moments.jl#L49-L60",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",m,[t("summary",null,[s[4]||(s[4]=t("a",{id:"PortfolioOptimisers.Semi",href:"#PortfolioOptimisers.Semi"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.Semi")],-1)),s[5]||(s[5]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[7]||(s[7]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Semi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractMomentAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p><code>Semi</code> is used for semi-moment estimators, where only observations below the mean (i.e., negative deviations) are considered.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.AbstractMomentAlgorithm"><code>AbstractMomentAlgorithm</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.Full"><code>Full</code></a></p></li></ul>',4)),e(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[6]||(s[6]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/30a4ce86fea848117ad063b2a2ff39f2b18f72e6/src/7_Moments/1_Base_Moments.jl#L63-L74",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",k,[t("summary",null,[s[8]||(s[8]=t("a",{id:"PortfolioOptimisers.AbstractExpectedReturnsEstimator",href:"#PortfolioOptimisers.AbstractExpectedReturnsEstimator"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractExpectedReturnsEstimator")],-1)),s[9]||(s[9]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[11]||(s[11]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractExpectedReturnsEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all expected returns estimator types in PortfolioOptimisers.jl.</p><p>All concrete types that implement expected returns estimation (e.g., sample mean, Bayesian estimators) should subtype <code>AbstractExpectedReturnsEstimator</code>. This enables a consistent interface for expected returns estimation routines throughout the package.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/01_Base#PortfolioOptimisers.AbstractEstimator"><code>AbstractEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.AbstractExpectedReturnsAlgorithm"><code>AbstractExpectedReturnsAlgorithm</code></a></p></li></ul>',5)),e(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[10]||(s[10]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/30a4ce86fea848117ad063b2a2ff39f2b18f72e6/src/7_Moments/1_Base_Moments.jl#L1-L14",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",g,[t("summary",null,[s[12]||(s[12]=t("a",{id:"PortfolioOptimisers.AbstractExpectedReturnsAlgorithm",href:"#PortfolioOptimisers.AbstractExpectedReturnsAlgorithm"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractExpectedReturnsAlgorithm")],-1)),s[13]||(s[13]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[15]||(s[15]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractExpectedReturnsAlgorithm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all expected returns algorithm types in PortfolioOptimisers.jl.</p><p>All concrete types that implement a specific algorithm for expected returns estimation (e.g., shrinkage, robust mean) should subtype <code>AbstractExpectedReturnsAlgorithm</code>. This allows for flexible extension and dispatch of expected returns estimation routines.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/01_Base#PortfolioOptimisers.AbstractAlgorithm"><code>AbstractAlgorithm</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.AbstractExpectedReturnsEstimator"><code>AbstractExpectedReturnsEstimator</code></a></p></li></ul>',5)),e(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[14]||(s[14]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/30a4ce86fea848117ad063b2a2ff39f2b18f72e6/src/7_Moments/1_Base_Moments.jl#L17-L30",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",u,[t("summary",null,[s[16]||(s[16]=t("a",{id:"PortfolioOptimisers.AbstractMomentAlgorithm",href:"#PortfolioOptimisers.AbstractMomentAlgorithm"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractMomentAlgorithm")],-1)),s[17]||(s[17]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[19]||(s[19]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractMomentAlgorithm </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractAlgorithm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all moment algorithm types in PortfolioOptimisers.jl.</p><p>All concrete types that implement a specific algorithm for moment estimation (e.g., full, semi) should subtype <code>AbstractMomentAlgorithm</code>. This allows for flexible extension and dispatch of moment estimation routines.</p><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/01_Base#PortfolioOptimisers.AbstractAlgorithm"><code>AbstractAlgorithm</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.AbstractCovarianceEstimator"><code>AbstractCovarianceEstimator</code></a></p></li></ul>',5)),e(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[18]||(s[18]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/30a4ce86fea848117ad063b2a2ff39f2b18f72e6/src/7_Moments/1_Base_Moments.jl#L33-L46",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",f,[t("summary",null,[s[20]||(s[20]=t("a",{id:"PortfolioOptimisers.AbstractCovarianceEstimator",href:"#PortfolioOptimisers.AbstractCovarianceEstimator"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractCovarianceEstimator")],-1)),s[21]||(s[21]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[23]||(s[23]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractCovarianceEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> StatsBase.CovarianceEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all covariance estimator types in PortfolioOptimisers.jl.</p><p>All concrete types that implement covariance estimation (e.g., sample covariance, shrinkage estimators) should subtype <code>AbstractCovarianceEstimator</code>. This enables a consistent interface for covariance estimation routines throughout the package.</p><p><strong>Related</strong></p><ul><li><p><a href="https://juliastats.org/StatsBase.jl/stable/cov/" target="_blank" rel="noreferrer"><code>StatsBase.CovarianceEstimator</code></a></p></li><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.AbstractMomentAlgorithm"><code>AbstractMomentAlgorithm</code></a></p></li></ul>',5)),e(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[22]||(s[22]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/30a4ce86fea848117ad063b2a2ff39f2b18f72e6/src/1_Base.jl#L52-L65",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",b,[t("summary",null,[s[24]||(s[24]=t("a",{id:"PortfolioOptimisers.AbstractVarianceEstimator",href:"#PortfolioOptimisers.AbstractVarianceEstimator"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.AbstractVarianceEstimator")],-1)),s[25]||(s[25]=a()),e(i,{type:"info",class:"jlObjectType jlType",text:"Type"})]),s[27]||(s[27]=o('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">abstract type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AbstractVarianceEstimator </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractCovarianceEstimator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> end</span></span></code></pre></div><p>Abstract supertype for all variance estimator types in PortfolioOptimisers.jl.</p><p>All concrete types that implement variance estimation (e.g., sample variance, robust variance estimators) should subtype <code>AbstractVarianceEstimator</code>. This enables a consistent interface for variance estimation routines and allows for flexible extension and dispatch within the package.</p><p><strong>Related</strong></p><ul><li><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.AbstractCovarianceEstimator"><code>AbstractCovarianceEstimator</code></a></li></ul>',5)),e(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[26]||(s[26]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/30a4ce86fea848117ad063b2a2ff39f2b18f72e6/src/1_Base.jl#L68-L80",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",y,[t("summary",null,[s[28]||(s[28]=t("a",{id:"PortfolioOptimisers.robust_cov",href:"#PortfolioOptimisers.robust_cov"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.robust_cov")],-1)),s[29]||(s[29]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[31]||(s[31]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">robust_cov</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StatsBase.CovarianceEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractWeights</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the covariance matrix robustly using the specified covariance estimator <code>ce</code>, data matrix <code>X</code>, and optional weights vector <code>w</code>.</p><p>This function attempts to compute the weighted covariance matrix using the provided estimator and keyword arguments. If an error occurs (e.g., due to unsupported keyword arguments), it retries with a reduced set of arguments for compatibility. This ensures robust weighted covariance estimation across different estimator types and StatsBase versions.</p><p><strong>Arguments</strong></p><ul><li><p><code>ce</code>: Covariance estimator to use.</p></li><li><p><code>X</code>: Data matrix.</p></li><li><p><code>w</code>: Optional weights for each observation.</p></li><li><p><code>dims</code>: Dimension along which to compute the covariance.</p></li><li><p><code>mean</code>: Optional mean array to use for centering.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to <code>cov</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>sigma::AbstractMatrix{&lt;:Real}</code>: Covariance matrix.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.robust_cor"><code>robust_cor</code></a></p></li><li><p><a href="https://juliastats.org/StatsBase.jl/stable/cov/" target="_blank" rel="noreferrer"><code>Statistics.cov</code></a></p></li></ul>`,9)),e(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[30]||(s[30]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/30a4ce86fea848117ad063b2a2ff39f2b18f72e6/src/7_Moments/1_Base_Moments.jl#L77-L104",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})]),t("details",_,[t("summary",null,[s[32]||(s[32]=t("a",{id:"PortfolioOptimisers.robust_cor",href:"#PortfolioOptimisers.robust_cor"},[t("span",{class:"jlbinding"},"PortfolioOptimisers.robust_cor")],-1)),s[33]||(s[33]=a()),e(i,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[35]||(s[35]=o(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">robust_cor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ce</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">StatsBase.CovarianceEstimator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractWeights</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">           dims</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mean </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nothing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compute the correlation matrix robustly using the specified covariance estimator <code>ce</code>, data matrix <code>X</code>, and optional weights vector <code>w</code>.</p><p>This function attempts to compute the weighted correlation matrix using the provided estimator and keyword arguments. If an error occurs, it falls back to computing the weighted covariance matrix and then converts it to a correlation matrix. This ensures robust weighted correlation estimation across different estimator types and StatsBase versions.</p><p><strong>Arguments</strong></p><ul><li><p><code>ce</code>: Covariance estimator to use.</p></li><li><p><code>X</code>: Data matrix.</p></li><li><p><code>w</code>: Optional weights for each observation.</p></li><li><p><code>dims</code>: Dimension along which to compute the correlation.</p></li><li><p><code>mean</code>: Optional mean array to use for centering.</p></li><li><p><code>kwargs...</code>: Additional keyword arguments passed to <code>cor</code>.</p></li></ul><p><strong>Returns</strong></p><ul><li><code>rho::AbstractMatrix{&lt;:Real}</code>: Correlation matrix.</li></ul><p><strong>Related</strong></p><ul><li><p><a href="/PortfolioOptimisers.jl/previews/PR16/api/07_Moments/01_Base_Moments#PortfolioOptimisers.robust_cov"><code>robust_cov</code></a></p></li><li><p><a href="https://juliastats.org/StatsBase.jl/stable/cov/" target="_blank" rel="noreferrer"><code>Statistics.cor</code></a></p></li></ul>`,9)),e(i,{type:"info",class:"source-link",text:"source"},{default:r(()=>[...s[34]||(s[34]=[t("a",{href:"https://github.com/dcelisgarza/PortfolioOptimisers.jl/blob/30a4ce86fea848117ad063b2a2ff39f2b18f72e6/src/7_Moments/1_Base_Moments.jl#L122-L149",target:"_blank",rel:"noreferrer"},"source",-1)])]),_:1})])])}const O=l(c,[["render",A]]);export{T as __pageData,O as default};
