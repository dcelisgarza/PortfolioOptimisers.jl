import{_ as i,c as a,o as t,aA as s}from"./chunks/framework.UvaYKHbv.js";const u=JSON.parse('{"title":"Developer documentation","description":"","frontmatter":{},"headers":[],"relativePath":"contribute/2-developer.md","filePath":"contribute/2-developer.md","lastUpdated":null}'),n={name:"contribute/2-developer.md"};function l(o,e,r,p,h,d){return t(),a("div",null,[...e[0]||(e[0]=[s(`<h1 id="dev_docs" tabindex="-1">Developer documentation <a class="header-anchor" href="#dev_docs" aria-label="Permalink to &quot;Developer documentation {#dev_docs}&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Contributing guidelines</p><p>If you haven&#39;t, please read the <a href="./1-contributing">Contributing guidelines</a> first.</p></div><p>If you want to make contributions to this package that involves code, then this guide is for you.</p><h2 id="First-time-clone" tabindex="-1">First time clone <a class="header-anchor" href="#First-time-clone" aria-label="Permalink to &quot;First time clone {#First-time-clone}&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">If you have writing rights</p><p>If you have writing rights, you don&#39;t have to fork. Instead, simply clone and skip ahead. Whenever <strong>upstream</strong> is mentioned, use <strong>origin</strong> instead.</p></div><p>If this is the first time you work with this repository, follow the instructions below to clone the repository.</p><ol><li><p>Fork this repo</p></li><li><p>Clone your repo (this will create a <code>git remote</code> called <code>origin</code>)</p></li><li><p>Add this repo as a remote:</p></li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> remote</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> add</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://github.com/dcelisgarza/PortfolioOptimisers.jl</span></span></code></pre></div><p>This will ensure that you have two remotes in your git: <code>origin</code> and <code>upstream</code>. You will create branches and push to <code>origin</code>, and you will fetch and update your local <code>main</code> branch from <code>upstream</code>.</p><h2 id="Linting-and-formatting" tabindex="-1">Linting and formatting <a class="header-anchor" href="#Linting-and-formatting" aria-label="Permalink to &quot;Linting and formatting {#Linting-and-formatting}&quot;">​</a></h2><p>Install a plugin on your editor to use <a href="https://editorconfig.org" target="_blank" rel="noreferrer">EditorConfig</a>. This will ensure that your editor is configured with important formatting settings.</p><p>We use <a href="https://pre-commit.com" target="_blank" rel="noreferrer">https://pre-commit.com</a> to run the linters and formatters. In particular, the Julia code is formatted using <a href="https://github.com/domluna/JuliaFormatter.jl" target="_blank" rel="noreferrer">JuliaFormatter.jl</a>, so please install it globally first:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Press ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activate</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> add JuliaFormatter</span></span></code></pre></div><p>To install <code>pre-commit</code>, we recommend using <a href="https://pipx.pypa.io" target="_blank" rel="noreferrer">pipx</a> as follows:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Install pipx following the link</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> pre-commit</span></span></code></pre></div><p>With <code>pre-commit</code> installed, activate it as a pre-commit hook:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pre-commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div><p>To run the linting and formatting manually, enter the command below:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pre-commit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span></span></code></pre></div><p><strong>Now, you can only commit if all the pre-commit tests pass</strong>.</p><h2 id="Testing" tabindex="-1">Testing <a class="header-anchor" href="#Testing" aria-label="Permalink to &quot;Testing {#Testing}&quot;">​</a></h2><p>As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run <code>test</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # press ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> activate .</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pkg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test</span></span></code></pre></div><h2 id="Working-on-a-new-issue" tabindex="-1">Working on a new issue <a class="header-anchor" href="#Working-on-a-new-issue" aria-label="Permalink to &quot;Working on a new issue {#Working-on-a-new-issue}&quot;">​</a></h2><p>We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.</p><ol><li>Fetch from the remote and fast-forward your local main</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> main</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> merge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --ff-only</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream/main</span></span></code></pre></div><ol start="2"><li>Branch from <code>main</code> to address the issue (see below for naming)</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> switch</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -c</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 42-add-answer-universe</span></span></code></pre></div><ol start="3"><li>Push the new local branch to your personal remote repository</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -u</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> origin</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 42-add-answer-universe</span></span></code></pre></div><ol start="4"><li>Create a pull request to merge your remote branch into the org main.</li></ol><h3 id="Branch-naming" tabindex="-1">Branch naming <a class="header-anchor" href="#Branch-naming" aria-label="Permalink to &quot;Branch naming {#Branch-naming}&quot;">​</a></h3><ul><li><p>If there is an associated issue, add the issue number.</p></li><li><p>If there is no associated issue, <strong>and the changes are small</strong>, add a prefix such as &quot;typo&quot;, &quot;hotfix&quot;, &quot;small-refactor&quot;, according to the type of update.</p></li><li><p>If the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.</p></li><li><p>Use dash separated imperative wording related to the issue (e.g., <code>14-add-tests</code>, <code>15-fix-model</code>, <code>16-remove-obsolete-files</code>).</p></li></ul><h3 id="Commit-message" tabindex="-1">Commit message <a class="header-anchor" href="#Commit-message" aria-label="Permalink to &quot;Commit message {#Commit-message}&quot;">​</a></h3><ul><li><p>Use imperative or present tense, for instance: <em>Add feature</em> or <em>Fix bug</em>.</p></li><li><p>Have informative titles.</p></li><li><p>When necessary, add a body with details.</p></li><li><p>If there are breaking changes, add the information to the commit message.</p></li></ul><h3 id="Before-creating-a-pull-request" tabindex="-1">Before creating a pull request <a class="header-anchor" href="#Before-creating-a-pull-request" aria-label="Permalink to &quot;Before creating a pull request {#Before-creating-a-pull-request}&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Atomic git commits</p><p>Try to create &quot;atomic git commits&quot; (recommended reading: <a href="https://blog.esciencecenter.nl/the-utopic-git-history-d44b81c09593" target="_blank" rel="noreferrer">The Utopic Git History</a>).</p></div><ul><li><p>Make sure the tests pass.</p></li><li><p>Make sure the pre-commit tests pass.</p></li><li><p>Fetch any <code>main</code> updates from upstream and rebase your branch, if necessary:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fetch</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rebase</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> upstream/main</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> BRANCH_NAME</span></span></code></pre></div></li><li><p>Then you can open a pull request and work with the reviewer to address any issues.</p></li></ul><h2 id="Writing-documentation" tabindex="-1">Writing documentation <a class="header-anchor" href="#Writing-documentation" aria-label="Permalink to &quot;Writing documentation {#Writing-documentation}&quot;">​</a></h2><ul><li>Please document new features. The documentation must include: <ul><li><p>Links to related functions and types.</p></li><li><p>Exhaustive descriptions of the arguments, keyword arguments, type information, and data validation.</p></li><li><p>Exhaustive usage examples as REPL-style <code>jldoctest</code> blocks, they should maximize code coverage.</p></li></ul></li></ul><h2 id="Building-and-viewing-the-documentation-locally" tabindex="-1">Building and viewing the documentation locally <a class="header-anchor" href="#Building-and-viewing-the-documentation-locally" aria-label="Permalink to &quot;Building and viewing the documentation locally {#Building-and-viewing-the-documentation-locally}&quot;">​</a></h2><p>Following the latest suggestions, we recommend using <code>LiveServer</code> to build the documentation. Here is how you do it:</p><ol><li><p>Run <code>julia --project=docs</code> to open Julia in the environment of the docs.</p></li><li><p>If this is the first time building the docs</p></li><li><p>Press <code>]</code> to enter <code>pkg</code> mode</p></li><li><p>Run <code>pkg&gt; dev .</code> to use the development version of your package</p></li><li><p>Press backspace to leave <code>pkg</code> mode</p></li><li><p>Run <code>julia&gt; using LiveServer</code></p></li><li><p>Run <code>julia&gt; servedocs()</code></p></li></ol><h2 id="Making-a-new-release" tabindex="-1">Making a new release <a class="header-anchor" href="#Making-a-new-release" aria-label="Permalink to &quot;Making a new release {#Making-a-new-release}&quot;">​</a></h2><p>To create a new release, you can follow these simple steps:</p><ul><li><p>Create a branch <code>release-x.y.z</code></p></li><li><p>Update <code>version</code> in <code>Project.toml</code></p></li><li><p>Update the <code>CHANGELOG.md</code>:</p><ul><li><p>Rename the section &quot;Unreleased&quot; to &quot;[x.y.z] - yyyy-mm-dd&quot; (i.e., version under brackets, dash, and date in ISO format)</p></li><li><p>Add a new section on top of it named &quot;Unreleased&quot;</p></li><li><p>Add a new link in the bottom for version &quot;x.y.z&quot;</p></li><li><p>Change the &quot;[unreleased]&quot; link to use the latest version - end of line, <code>vx.y.z ... HEAD</code>.</p></li></ul></li><li><p>Create a commit &quot;Release vx.y.z&quot;, push, create a PR, wait for it to pass, merge the PR.</p></li><li><p>Go back to main screen and click on the latest commit (link: <a href="https://github.com/dcelisgarza/PortfolioOptimisers.jl/commit/main" target="_blank" rel="noreferrer">https://github.com/dcelisgarza/PortfolioOptimisers.jl/commit/main</a>)</p></li><li><p>At the bottom, write <code>@JuliaRegistrator register</code></p></li></ul><p>After that, you only need to wait and verify:</p><ul><li><p>Wait for the bot to comment (should take &lt; 1m) with a link to a PR to the registry</p></li><li><p>Follow the link and wait for a comment on the auto-merge</p></li><li><p>The comment should said all is well and auto-merge should occur shortly</p></li><li><p>After the merge happens, TagBot will trigger and create a new GitHub tag. Check on <a href="https://github.com/dcelisgarza/PortfolioOptimisers.jl/releases" target="_blank" rel="noreferrer">https://github.com/dcelisgarza/PortfolioOptimisers.jl/releases</a></p></li><li><p>After the release is create, a &quot;docs&quot; GitHub action will start for the tag.</p></li><li><p>After it passes, a deploy action will run.</p></li><li><p>After that runs, the <a href="https://dcelisgarza.github.io/PortfolioOptimisers.jl/stable" target="_blank" rel="noreferrer">stable docs</a> should be updated. Check them and look for the version number.</p></li></ul>`,49)])])}const g=i(n,[["render",l]]);export{u as __pageData,g as default};
